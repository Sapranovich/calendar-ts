{"version":3,"sources":["constants.js","services/calendarServices.ts","components/Calendar.tsx","services/timeServices.ts","services/localStoreServices.ts","components/Modal.tsx","components/ToDoListItem.tsx","components/ToDoList.tsx","App.tsx","index.tsx"],"names":["MONTH_NAMES","WEEK_DAY_NAMES","DAYS_IN_MONTH","currentMonthData","year","month","data","date","Date","daysInMonth","getMonth","isLeapYear","getFullYear","CONSTANTS","getDaysInMonth","monthStartsOn","dayOfWeek","getDay","getDayOfWeek","day","i","j","Calendar","store","setStore","currentDate","calendarDate","selectedDate","className","onClick","map","name","index","week","idSelectedDate","getTime","handleDayCellClick","getDate","getTimeInFormat","hour","updateStore","key","JSON","parse","localStorage","getItem","hasOwnProperty","Array","fill","undefined","setItem","stringify","Modal","isOpenModal","dataChangeMessage","currentHour","text","React","useState","inputText","setInputText","toLocaleString","split","onChange","event","target","value","placeholder","saveInLocalStorage","storeMessages","ToDoListItem","handleOpenModalButtonClick","ToDoList","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bbb7e0b6.chunk.js","sourcesContent":["export const MONTH_NAMES = [\r\n  \"Январь\",\r\n  \"Февраль\",\r\n  \"Март\",\r\n  \"Апрель\",\r\n  \"Май\",\r\n  \"Июнь\",\r\n  \"Июль\",\r\n  \"Август\",\r\n  \"Сентябрь\",\r\n  \"Октябрь\",\r\n  \"Ноябрь\",\r\n  \"Декабрь\",\r\n];\r\n\r\nexport const WEEK_DAY_NAMES = [\"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\", \"Вс\"];\r\nexport const WEEK_DAY_FULL_NAMES = [\"Понедельник\", \"Вторник\", \"Среда\", \"Четверг\", \"Пятница\", \"Субота\", \"Воскресенье\"];\r\n\r\nexport const DAYS_WEEK = 7;\r\nexport const HOURS_DAY = 24;\r\n\r\nexport const DAYS_IN_MONTH = [31,28,31,30, 31, 30, 31, 31, 30, 31, 30, 31];","import * as CONSTANTS from '../constants.js';\r\n\r\n// Проверка, является ли год высокосным\r\nfunction isLeapYear(year:number){\r\n  return !((year%4)|| (!(year%100)&&(year%400)));\r\n}\r\n\r\n// Рассчет количества дней в текущем месяце\r\nfunction getDaysInMonth(date:Date){\r\n   const month = date.getMonth();\r\n   const year = date.getFullYear();\r\n   if(isLeapYear(year) && month ===1){\r\n     return CONSTANTS.DAYS_IN_MONTH[month]+1;\r\n   }else{\r\n     return CONSTANTS.DAYS_IN_MONTH[month];\r\n   }\r\n}\r\n\r\n// Рассчет дня недели (в USA воскресенье считается 0 днем)\r\nfunction getDayOfWeek(date:Date){\r\n  const dayOfWeek = date.getDay();\r\n  if(dayOfWeek === 0) return 6;\r\n  return dayOfWeek-1;\r\n}\r\n\r\n//  Рассчет сетки текущего(выбранного) месяца \r\nfunction currentMonthData(year:number, month:number){\r\n   const data:Array<Array<Date | null>> = [];\r\n   const date = new Date(year, month);\r\n   const daysInMonth = getDaysInMonth(date)\r\n   const monthStartsOn = getDayOfWeek(date)\r\n   let day = 1;\r\n\r\n   for(let i =0; i < (daysInMonth + monthStartsOn) / CONSTANTS.DAYS_WEEK; i++){\r\n     data[i] = [];\r\n     for(let j=0; j < CONSTANTS.DAYS_WEEK; j++){\r\n       if((i===0 && j < monthStartsOn) || day>daysInMonth){\r\n        data[i][j]= null;\r\n       }else{\r\n        data[i][j]= new Date(year, month, day++);\r\n       }\r\n\r\n     }\r\n   }\r\n  return data;\r\n}\r\n\r\nexport default currentMonthData;","import React from \"react\";\r\nimport * as CONSTANTS from \"../constants.js\";\r\n\r\nimport currentMonthData from '../services/calendarServices';\r\n\r\nimport {ICalendarProps} from '../interfaces/basicInterfaces';\r\n\r\nfunction Calendar({ store, setStore }:ICalendarProps) {\r\n  const { currentDate, calendarDate, selectedDate } = store;\r\n\r\n  const handlePrevMonthButtonClick = () => {\r\n    const date = new Date( calendarDate.getFullYear(), calendarDate.getMonth() - 1);\r\n    setStore({ \r\n      ...store, \r\n      calendarDate: date \r\n    });\r\n  };\r\n\r\n  const handleNextMonthButtonClick = () => {\r\n    const date = new Date( calendarDate.getFullYear(), calendarDate.getMonth() + 1);\r\n    setStore({ \r\n      ...store, \r\n      calendarDate: date \r\n    });\r\n  };\r\n\r\n  const handleDayCellClick = (date: Date) => {\r\n    setStore({ \r\n      ...store, \r\n      selectedDate: date, \r\n      idSelectedDate: date.getTime() });\r\n  };\r\n\r\n  return (\r\n    <div className=\"calendar app__calendar\">\r\n\r\n      <div className=\"calendar__header\">\r\n        <button onClick={handlePrevMonthButtonClick} className=\"button calendar__button\">❮</button>\r\n        <h3 className=\"calendar__title\"> {CONSTANTS.MONTH_NAMES[calendarDate.getMonth()]} {calendarDate.getFullYear()}</h3>\r\n        <button onClick={handleNextMonthButtonClick} className=\"button calendar__button\">❯</button>\r\n      </div>\r\n\r\n      <div className=\"calendar__list calendar__list_decor\">\r\n\r\n        <div className=\"calendar__row\">\r\n          {CONSTANTS.WEEK_DAY_NAMES.map((name, index) => (<span key={index} className=\"calendar__row-cell calendar__row-cell_remove-hover\">{name}</span> ))}\r\n        </div>\r\n\r\n        {currentMonthData(calendarDate.getFullYear(), calendarDate.getMonth()).map((week:Array<Date | null>, index:number) => (\r\n          <div key={index} className=\"calendar__row\">\r\n            {week.map((date, index:number) =>\r\n              date ? (\r\n                <span key={index} \r\n                  onClick={() => handleDayCellClick(date)} \r\n                  className={`calendar__row-cell \r\n                    ${currentDate.getTime() === date.getTime() ? \"calendar__row-cell_current\": ''}\r\n                    ${selectedDate.getTime() === date.getTime() ? \"calendar__row-cell_selected\": ''}`}>{date.getDate()}</span>\r\n              ) : (\r\n                <span key={index} className=\"calendar__row-cell calendar__row-cell_empty\"></span>\r\n              )\r\n            )}\r\n          </div>\r\n        ))}\r\n        \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Calendar;\r\n","\r\n// Преобразование числового значения часа в формат чч:мм\r\nfunction getTimeInFormat(hour:number | undefined){\r\n  if(typeof hour === \"number\") {\r\n    return hour>=10 ? `${hour}:00`:`0${hour}:00`;\r\n  }else {\r\n    return 'ХХ:ХХ';\r\n  }\r\n\r\n}\r\n\r\nexport default getTimeInFormat;","import * as CONSTANTS from '../constants.js';\r\nfunction updateStore(key:number, hour:any, data:string){\r\n  const store = JSON.parse(localStorage.getItem(\"storeMessages\") || '{}'); \r\n  if(!store.hasOwnProperty(key)){  \r\n    store[key] = Array(CONSTANTS.HOURS_DAY).fill(undefined);\r\n  }\r\n  store[key][hour] = data ? data : undefined;\r\n  localStorage.setItem(\"storeMessages\", JSON.stringify(store));\r\n}\r\n\r\nexport default updateStore;","import React from \"react\";\r\n\r\nimport getTimeInFormat from '../services/timeServices';\r\nimport saveInLocalStorage from '../services/localStoreServices';\r\n\r\nimport {ICalendarProps} from '../interfaces/basicInterfaces';\r\n\r\nfunction Modal({store, setStore}: ICalendarProps) {\r\n  const {isOpenModal, idSelectedDate, selectedDate, dataChangeMessage:{currentHour, text}} = store;\r\n  const [inputText, setInputText] = React.useState(text);\r\n\r\n  const handleCloseButtonClick = ()=>{\r\n    setStore({...store, isOpenModal: !isOpenModal, dataChangeMessage: {\r\n      currentHour: undefined,\r\n      text: '',\r\n    }})\r\n  }\r\n\r\n  const handleChangeInputText = (event:React.ChangeEvent<HTMLTextAreaElement>) =>{\r\n    setInputText(event.target.value);\r\n  }\r\n\r\n  const handleAddButtonClick = () =>{\r\n    if(!localStorage.getItem(\"storeMessages\")){\r\n      localStorage.setItem(\"storeMessages\", JSON.stringify({}));\r\n    }\r\n    saveInLocalStorage(idSelectedDate, currentHour, inputText);\r\n    setStore({...store, isOpenModal: !isOpenModal, \r\n      storeMessages: JSON.parse(localStorage.getItem(\"storeMessages\") || '{}'),\r\n      dataChangeMessage: {\r\n      currentHour: undefined,\r\n      text: '',\r\n      }\r\n    })\r\n  }\r\n  \r\n  const handleRemoveButtonClick = () =>{\r\n    setInputText('')\r\n  } \r\n\r\n  return (\r\n    <div className={`modal modal_visibility`}>\r\n      <div className=\"modal__wrapper\">\r\n        <span className=\"modal__close-button\" onClick={handleCloseButtonClick}></span>\r\n        <div className=\"card\">\r\n          <h3 className=\"card__title\">Дата {selectedDate.toLocaleString().split(',')[0]}  Время {getTimeInFormat(currentHour)}</h3>\r\n          <textarea\r\n            onChange = {handleChangeInputText}\r\n            value = {inputText}\r\n            className=\"card__textarea\"\r\n            placeholder=\"Введите текст...\"\r\n            name=\"card-text\"\r\n          />\r\n\r\n          <div className=\"to-do-list__item-buttons\">\r\n            <button className=\"button to-do-list__button to-do-list__button_add\" onClick={handleAddButtonClick}></button>\r\n            <button className=\"button to-do-list__button to-do-list__button_remove\" onClick={handleRemoveButtonClick}></button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Modal;\r\n","import React from \"react\";\r\n\r\nimport getTimeInFormat from '../services/timeServices';\r\nimport saveInLocalStorage from '../services/localStoreServices';\r\n\r\nimport {IToDoListItemProps} from '../interfaces/basicInterfaces';\r\n\r\nfunction ToDoListItem({hour, data, store, setStore}:IToDoListItemProps) {\r\n  const { isOpenModal, idSelectedDate} = store;\r\n  \r\n  const handleOpenModalButtonClick = ()=>{\r\n    setStore({...store, \r\n      isOpenModal:!isOpenModal,\r\n      dataChangeMessage: {\r\n        currentHour: hour,\r\n        text: data ? data : '',\r\n      },\r\n     })\r\n  }\r\n\r\n  const handleRemoveMessageButtonClick = ()=>{\r\n    saveInLocalStorage(idSelectedDate, hour, '');\r\n    setStore({...store, \r\n      storeMessages: JSON.parse(localStorage.getItem(\"storeMessages\") || '{}'),\r\n    })\r\n  }\r\n\r\n  return (\r\n  <div className={`to-do-list__item to-do-list_decor-bot ${data ? 'to-do-list__item_colored':''}`}>\r\n      <h4 className=\"to-do-list__item-title\" onClick={handleOpenModalButtonClick}>{getTimeInFormat(hour)}</h4>\r\n      <div className=\"to-do-list__item-description\">\r\n       {data ? data : 'Нет заметок...'}\r\n      </div>\r\n      <div className=\"to-do-list__item-buttons\">\r\n        {!data && <button className=\"button to-do-list__button to-do-list__button_add\" onClick={handleOpenModalButtonClick}></button>}\r\n        {data && <button className=\"button to-do-list__button to-do-list__button_update\" onClick={handleOpenModalButtonClick}></button>}\r\n        {data && <button className=\"button to-do-list__button to-do-list__button_remove\" onClick={handleRemoveMessageButtonClick}></button>}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ToDoListItem;\r\n","import React from \"react\";\r\nimport * as CONSTANTS from '../constants.js';\r\n\r\nimport ToDoListItem from './ToDoListItem';\r\n\r\nimport {ICalendarProps} from '../interfaces/basicInterfaces';\r\n\r\nfunction ToDoList({store, setStore}:ICalendarProps) {\r\n  const {currentDate, selectedDate, storeMessages, idSelectedDate} = store;\r\n \r\n  const handleCurrentButtonClick =()=>{\r\n    setStore({\r\n      ...store,\r\n      selectedDate:currentDate, \r\n      calendarDate: currentDate,\r\n      idSelectedDate: currentDate.getTime(),\r\n    })\r\n  }\r\n \r\n  return (\r\n    <div className=\"to-do-list app__to-do-list\">\r\n      <div className=\"to-do-list__header\">\r\n        <h3 className=\"to-do-list__title\"> {selectedDate.toLocaleString().split(',')[0]}</h3>\r\n        <button onClick={handleCurrentButtonClick} className=\"button to-do-list__button to-do-list__button_current\"></button>\r\n      </div>\r\n      <div className=\"to-do-list__wrapper to-do-list_decor\">\r\n        {\r\n          (idSelectedDate in storeMessages) \r\n          ? storeMessages[idSelectedDate].map((data:string | null, index:number)=> <ToDoListItem store ={store} setStore={setStore} key={index} hour={index} data = {data} />)\r\n          : (Array(CONSTANTS.HOURS_DAY).fill(null).map( (data, index)=> <ToDoListItem store ={store} setStore={setStore} key={index} hour={index} data = {data} />)) \r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default ToDoList;\r\n","import React from 'react';\n\nimport Calendar from './components/Calendar';\nimport Modal from './components/Modal';\nimport ToDoList from './components/ToDoList';\n\nimport {IStandartTypesStore} from './interfaces/basicInterfaces';\n\nfunction App() {\n  const date = new Date();\n  const currentDate = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n\n  const [store, setStore] = React.useState<IStandartTypesStore>({\n    isOpenModal: false,\n    calendarDate: currentDate,\n    currentDate: currentDate,\n    selectedDate: currentDate,\n    idSelectedDate: currentDate.getTime(),\n    storeMessages: JSON.parse(localStorage.getItem(\"storeMessages\") || '{}'),\n    dataChangeMessage: {\n       currentHour: undefined,\n       text: '',\n     },\n  })\n\n  return (\n    <div className=\"app\">\n      <div className=\"wrapper\">\n        <div className=\"app__wrapper\">\n          <Calendar  store={store} setStore={setStore}/>\n          <ToDoList store={store} setStore={setStore}/>\n        </div>\n        {store.isOpenModal && <Modal store={store} setStore={setStore}/> }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nimport './scss/style.scss';\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n"],"sourceRoot":""}