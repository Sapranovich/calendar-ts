{"version":3,"sources":["services/isEmpty.ts","redux/auth/authConstants.ts","redux/auth/authReducer.ts","data/modalTypes.ts","data/userRoles.ts","data/regExp.ts","data/urls.ts","data/calendar.ts","services/monthData.ts","redux/calendar/calendarConstants.ts","redux/calendar/calendarReducer.ts","redux/messages/messagesConstants.ts","redux/messages/messagesReducer.ts","redux/users/usersConstants.ts","redux/users/usersReducer.ts","redux/modal/modalConstants.ts","redux/modal/modalReducer.ts","redux/reducers.ts","redux/index.ts","pages/Landing/index.tsx","redux/auth/authActions.ts","redux/modal/modalActions.ts","redux/messages/messagesActions.ts","redux/calendar/calendarActions.ts","components/MainWrapper/index.tsx","services/validationSignIn.ts","services/setAuthToken.ts","components/SignInForm/index.tsx","services/getModelUser.ts","services/validationSignUp.ts","components/SignUpForm/index.tsx","services/getTimeInFormat.ts","components/Calendar/CardMessage/index.tsx","services/getDateInFormat.ts","components/Calendar/Segment/SegmentGroup/index.tsx","services/verificationFilterInput.ts","services/validationFilterForm.ts","services/groupMessagesByDay.ts","components/Calendar/Segment/index.tsx","components/SelectedUserData/index.tsx","components/Calendar/CardEmpty/index.tsx","components/Calendar/Day/index.tsx","components/Calendar/Month/DayOfTheWeek/index.tsx","components/Calendar/Month/WeekOfTheMonth/index.tsx","components/Calendar/Month/index.tsx","components/Calendar/index.tsx","components/Calendar/WidgetMonth/WidgetDayOfTheWeek/index.tsx","components/Calendar/WidgetMonth/WidgetWeekOfTheMonth/index.tsx","components/Calendar/MonthToggle/index.tsx","components/Calendar/WidgetMonth/index.tsx","components/UsersList/UserItem/index.tsx","components/UsersList/index.tsx","components/SideBar/index.tsx","components/Header/index.tsx","hooks/useMessageObject.ts","components/AddUpdateMessageModal/index.tsx","components/ViewMessageModal/index.tsx","components/Modal/index.tsx","pages/Login/index.tsx","pages/Logout/index.tsx","pages/NotFound/index.tsx","pages/Main/index.tsx","pages/Loading/index.tsx","App.tsx","index.tsx"],"names":["isEmpty","value","undefined","Object","keys","length","trim","SET_AUTH_USER","SET_LOADED","initialState","isAuthenticated","isLoaded","user","MODAL_TYPES","USER_ROLES","REG_EXP_CHECK_DATE","BACKEND_URL","MONTH_NAMES","WEEK_DAY_NAMES","DAYS_IN_MONTH","monthData","year","month","data","date","Date","daysInMonth","getMonth","isLeapYear","getFullYear","getDaysInMonth","monthStartsOn","dayOfWeek","getDay","getDayOfWeek","day","i","j","isCurrentMonth","SET_ALL_START_DATES","UPDATE_DATA_MONTH","SET_CURRENT_HOUR","UPDATE_SELECTED_DATE","basicDate","currentDate","currentHour","selectedWeek","selectedDate","idSelectedDate","SET_ALL_MESSAGES","isNoMessages","isLoadedMessages","messages","SET_ALL_USERS","users","OPEN_MODAL","SET_MODAL_DATA","CLOSE_MODAL","isOpenModal","modalType","modalData","rootReducers","combineReducers","calendar","state","action","type","constants","payload","getTime","modal","auth","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","Landing","className","to","setAuthUser","setLoaded","boolean","openModal","closeModal","requestAllMessages","userId","dispatch","axios","get","then","res","setAllMessages","setCurrentHour","updateSelectedDate","updateDataMonth","MainWrapper","children","useSelector","id","role","useDispatch","React","useEffect","getDate","setAllStartDates","setTimeout","Fragment","validationSignIn","errors","Validator","isEmail","email","isLength","password","min","max","isValid","setAuthToken","token","defaults","headers","common","SignInForm","handleToggleButtonClick","registerUserEmail","useState","stateForm","setStateForm","errorsForm","setErrorsForm","handleInputChange","event","target","name","request","onSubmit","preventDefault","post","accessToken","localStorage","setItem","idUser","jwt_decode","sub","catch","err","response","placeholder","onChange","onClick","getModelUser","stateSignUpForm","validationSignUp","password_confirmed","equals","SignUpForm","setRegisterUserEmail","modelUser","getTimeInFormat","hour","CardMessage","groupId","messageData","authId","handleOpenModalClick","message","delete","getDateInFormat","dateInMilliseconds","SegmentGroup","group","map","index","verificationFilterInput","currentValueInput","validationFilterForm","startParam","match","endParam","groupMessagesByDay","Array","from","Set","el","dayId","daysId","filter","device","Segment","propsMessages","messagesLocalStorage","setMessagesLocalStorage","errorsFilter","setErrorsFilter","paramsFilter","setParamFilter","arrayStartParam","split","arrayEndParam","indexStartParam","indexEndParam","warning","filteredData","SelectedUserData","useRouteMatch","params","userData","setUserData","userMessages","setUserMessages","getAllDataUser","a","console","log","handleUpdateRoleClick","updateDataUser","put","CardEmpty","Day","messagesTargetDay","messagesDay","fill","find","withRouter","history","dayData","path","setLocalStorage","slice","push","weekData","weekNumber","Month","week","Calendar","exact","component","isCurrentDate","isSelectedDate","MonthToggle","WidgetMonth","UserItem","UsersList","setIsLoaded","listUsers","setListUsers","setAllUsers","useCallback","SideBar","isOpenSideBar","Header","setIsOpenSideBar","useModalMessageObject","modalMessageObject","title","AddUpdateMessageModal","messageObject","stateMessageModal","setStateMessageModal","handleAddUpdateButtonClick","ViewMessageModal","Modal","Login","isSignUpForm","toggleIsSignUpForm","Logout","removeItem","NotFound","redirect","setRedirect","url","Main","Loading","App","decodedToken","currentTime","now","exp","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8f0b4f1c.chunk.js","sourcesContent":["function isEmpty(value: any): boolean {\r\n  return (\r\n    value === undefined ||\r\n    value === null ||\r\n    (typeof value === \"object\" && Object.keys(value).length === 0) ||\r\n    (typeof value === \"string\" && value.trim().length === 0)\r\n  );\r\n}\r\nexport default isEmpty;\r\n","export const SET_AUTH_USER = \"SET_AUTH_USER\";\r\nexport const SET_LOADED = \"SET_LOADED\";\r\n","import isEmpty from \"../../services/isEmpty\";\r\n\r\nimport { ModelUserType } from '../../services/getModelUser';\r\n\r\nimport * as constants from \"./authConstants\";\r\nimport * as actions from \"./authActions\";\r\n\r\ntype InferValueTypes<T> = T extends { [key: string]: infer U } ? U : never;\r\ntype ActionTypes = ReturnType<InferValueTypes<typeof actions>>;\r\n\r\nexport type InitialStateType = {\r\n  isAuthenticated: boolean\r\n  isLoaded: boolean\r\n  user: ModelUserType \r\n};\r\n\r\nconst initialState = {\r\n  isAuthenticated: false,\r\n  isLoaded: false,\r\n  user: {},\r\n};\r\n\r\nexport default function auth(state = initialState, action: ActionTypes):InitialStateType {\r\n  switch (action.type) {\r\n    case constants.SET_AUTH_USER:\r\n      return {\r\n        ...state,\r\n        isAuthenticated: !isEmpty(action.payload),\r\n        user: action.payload,\r\n      };\r\n    case constants.SET_LOADED:\r\n      return {\r\n        ...state,\r\n        isLoaded: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","export const MODAL_TYPES = {\r\n  ADD: \"ADD\",\r\n  UPDATE: \"UPDATE\",\r\n  VIEW: \"VIEW\",\r\n};","export const USER_ROLES = {\r\n  ADMIN: \"admin\",\r\n  USER: \"user\",\r\n  VIEWER: \"viewer\",\r\n};","export const REG_EXP_CHECK_DATE =\r\n  \"^(?=\\\\d{2}([\\\\/])\\\\d{2}\\\\1\\\\d{4}$)(?:0[1-9]|1\\\\d|[2][0-8]|29(?!.02.(?!(?!(?:[02468][1-35-79]|[13579][0-13-57-9])00)\\\\d{2}(?:[02468][048]|[13579][26])))|30(?!.02)|31(?=.(?:0[13578]|10|12))).(?:0[1-9]|1[012]).\\\\d{4}$\";","// export const BACKEND_URL = \"https://my-cool-project-123.herokuapp.com\";\r\nexport const BACKEND_URL = \"http://localhost:3001\";","export const MONTH_NAMES = [\r\n  \"January\",\r\n  \"February\",\r\n  \"March\",\r\n  \"April\",\r\n  \"May\",\r\n  \"June\",\r\n  \"July\",\r\n  \"August\",\r\n  \"September\",\r\n  \"October\",\r\n  \"November\",\r\n  \"December\",\r\n];\r\nexport const WEEK_DAY_NAMES = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\r\n\r\nexport const DAYS_WEEK = 7;\r\nexport const HOURS_DAY = 24;\r\n\r\nexport const DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\r\n","import { DAYS_IN_MONTH, DAYS_WEEK } from '../data';\r\n\r\n// Проверка, является ли год высокосным\r\nfunction isLeapYear(year: number): boolean {\r\n  return !(year % 4 || (!(year % 100) && year % 400));\r\n}\r\n\r\n// Рассчет количества дней в текущем месяце\r\nfunction getDaysInMonth(date: Date): number {\r\n  const month = date.getMonth();\r\n  const year = date.getFullYear();\r\n  if (isLeapYear(year) && month === 1) {\r\n    return DAYS_IN_MONTH[month] + 1;\r\n  } else {\r\n    return DAYS_IN_MONTH[month];\r\n  }\r\n}\r\n\r\n// Рассчет дня недели (в USA воскресенье считается 0 днем)\r\nfunction getDayOfWeek(date: Date): number {\r\n  const dayOfWeek = date.getDay();\r\n  if (dayOfWeek === 0) return 6;\r\n  return dayOfWeek - 1;\r\n}\r\n\r\ntype DataItemType = {\r\n  date: Date;\r\n  isCurrentMonth: boolean;\r\n}\r\n\r\n//  Рассчет сетки текущего(выбранного) месяца\r\nfunction monthData(year: number, month: number): Array<DataItemType[]> {\r\n  const data: Array<DataItemType[]> = [];\r\n  const date = new Date(year, month);\r\n  const daysInMonth = getDaysInMonth(date);\r\n  const monthStartsOn = getDayOfWeek(date);\r\n  let day = 1;\r\n\r\n  for (let i = 0; i < (daysInMonth + monthStartsOn) / DAYS_WEEK; i++) {\r\n    data[i] = [];\r\n    for (let j = 0; j < DAYS_WEEK; j++) {\r\n      if (i === 0 && j < monthStartsOn) {\r\n        data[i][j] = {\r\n          date: new Date(year, month, day - (monthStartsOn - j)),\r\n          isCurrentMonth: false,\r\n        };\r\n      } else if (day > daysInMonth) {\r\n        data[i][j] = {\r\n          date: new Date(year, month, day++),\r\n          isCurrentMonth: false,\r\n        };\r\n      } else {\r\n        data[i][j] = {\r\n          date: new Date(year, month, day++),\r\n          isCurrentMonth: true,\r\n        };\r\n      }\r\n    }\r\n  }\r\n  return data;\r\n}\r\n\r\nexport default monthData;\r\n","export const SET_ALL_START_DATES = 'SET_ALL_START_DATES';\r\nexport const UPDATE_DATA_MONTH = 'UPDATE_DATA_MONTH';\r\nexport const SET_CURRENT_HOUR ='SET_CURRENT_HOUR';\r\nexport const UPDATE_SELECTED_DATE = 'UPDATE_SELECTED_DATE';\r\nexport const CLEAR_DATES ='CLEAR_DATES';\r\n","import monthData from \"../../services/monthData\";\r\n\r\nimport * as constants from \"./calendarConstants\";\r\nimport * as actions from \"./calendarActions\";\r\n\r\nexport type DayDataType = {\r\n  date: Date;\r\n  isCurrentMonth: boolean;\r\n};\r\n\r\ntype InferValueTypes<T> = T extends { [key: string]: infer U } ? U : never;\r\ntype ActionTypes = ReturnType<InferValueTypes<typeof actions>>;\r\n\r\nexport type InitialStateType = {\r\n  data: DayDataType[][] | null;\r\n  currentDate: Date | null;\r\n  currentHour: number | null;\r\n  basicDate: Date | null;\r\n  selectedDate: Date | null;\r\n  selectedWeek: number | null;\r\n  idSelectedDate: number | null;\r\n};\r\n\r\nconst initialState: InitialStateType = {\r\n  data: null,\r\n  basicDate: null,\r\n  currentDate: null,\r\n  currentHour: null,\r\n  selectedWeek: null,\r\n  selectedDate: null,\r\n  idSelectedDate: null,\r\n};\r\n\r\nexport default function calendar( state = initialState, action: ActionTypes): InitialStateType {\r\n  switch (action.type) {\r\n    case constants.SET_ALL_START_DATES:\r\n      return {\r\n        ...state,\r\n        data: monthData(\r\n          action.payload.getFullYear(),\r\n          action.payload.getMonth()\r\n        ),\r\n        currentDate: action.payload,\r\n        basicDate: action.payload,\r\n      };\r\n    case constants.UPDATE_DATA_MONTH:\r\n      return {\r\n        ...state,\r\n        data: monthData(\r\n          action.payload.getFullYear(),\r\n          action.payload.getMonth()\r\n        ),\r\n        basicDate: action.payload,\r\n      };\r\n    case constants.SET_CURRENT_HOUR:\r\n      return {\r\n        ...state,\r\n        currentHour: action.payload,\r\n      };\r\n    case constants.UPDATE_SELECTED_DATE:\r\n      return {\r\n        ...state,\r\n        selectedDate: action.payload,\r\n        idSelectedDate: action.payload.getTime(),\r\n      };\r\n    // case constants.CLEAR_DATES:\r\n    //   return initialState;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","export const SET_ALL_MESSAGES = \"SET_ALL_MESSAGES\";\r\n","import isEmpty from '../../services/isEmpty';\r\n\r\nimport { SetAllMessagesActionType } from './messagesActions';\r\nimport { MessagesSpecificDateType, UserMessageDataType1 } from '../../types/messagesDataTypes';\r\n\r\nimport * as constants from './messagesConstants';\r\n\r\nexport type InitialStateType = {\r\n  isNoMessages: boolean\r\n  isLoadedMessages: boolean\r\n  messages: UserMessageDataType1[]\r\n};\r\nconst initialState = {\r\n  isNoMessages: false,\r\n  isLoadedMessages: false,\r\n  messages: [],\r\n};\r\n\r\nexport default function messages(state = initialState, action: SetAllMessagesActionType): InitialStateType {\r\n  switch (action.type) {\r\n    case constants.SET_ALL_MESSAGES:\r\n      return {\r\n        ...state,\r\n        isNoMessages: isEmpty(action.payload),\r\n        isLoadedMessages: true,\r\n        messages: action.payload\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","export const SET_ALL_USERS = 'SET_ALL_USERS';","import { ModelUserType } from \"../../services/getModelUser\";\r\n\r\nimport * as constants from \"./usersConstants\";\r\nimport * as actions from './usersActions';\r\n\r\ntype InferValueTypes<T> = T extends { [key: string]: infer U } ? U : never;\r\ntype ActionTypes = ReturnType<InferValueTypes<typeof actions>>;\r\n\r\nexport type InitialSatateType = {\r\n  isLoaded: boolean\r\n  users: ModelUserType[],\r\n}\r\n\r\nconst initialState = {\r\n  isLoaded: false,\r\n  users: [],\r\n};\r\n\r\nexport default function users(state = initialState, action: ActionTypes):InitialSatateType {\r\n  switch (action.type) {\r\n    case constants.SET_ALL_USERS:\r\n      return {\r\n        ...state,\r\n        isLoaded: true,\r\n        users: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","export const OPEN_MODAL = \"OPEN_MODAL\";\r\nexport const SET_MODAL_DATA = \"SET_MODAL_DATA\";\r\nexport const CLOSE_MODAL = \"CLOSE_MODAL\";\r\n","import * as constants from \"./modalConstants\";\r\nimport * as actions from './modalActions';\r\nimport isEmpty from \"../../services/isEmpty\";\r\nimport { UserMessageDataType1 } from '../../types/messagesDataTypes';\r\n\r\ntype InferValueTypes<T> = T extends { [key: string]: infer U } ? U : never;\r\ntype ActionTypes = ReturnType<InferValueTypes<typeof actions>>;\r\n\r\nexport type InitialStateType = {\r\n  isOpenModal:boolean\r\n  modalType:string | null\r\n  modalData: UserMessageDataType1\r\n}\r\n\r\nconst initialState = {\r\n  isOpenModal: false,\r\n  modalType: null,\r\n  modalData: {}\r\n};\r\n\r\nexport default function modal(state = initialState, action: ActionTypes):InitialStateType {\r\n  switch (action.type) {\r\n    case constants.OPEN_MODAL:\r\n      return {\r\n        ...state,\r\n        isOpenModal: true,\r\n        modalType: action.payload\r\n      };\r\n    case constants.SET_MODAL_DATA:\r\n      return {\r\n        ...state,\r\n        modalData: action.payload\r\n      }  \r\n    case constants.CLOSE_MODAL:\r\n      return initialState\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport auth from './auth/authReducer';\r\nimport calendar from './calendar/calendarReducer';\r\nimport messages from './messages/messagesReducer';\r\nimport users from './users/usersReducer';\r\nimport modal from './modal/modalReducer';\r\n\r\n\r\n\r\nconst rootReducers = combineReducers({\r\n  calendar,\r\n  modal,\r\n  auth,\r\n  messages,\r\n  users\r\n});\r\nexport type RootState = ReturnType<typeof rootReducers>;\r\n\r\nexport default rootReducers;\r\n","import { compose, createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport rootReducers from \"./reducers\";\r\n\r\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(\r\n  rootReducers,\r\n  composeEnhancers(applyMiddleware(thunk))\r\n);\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Landing = (): JSX.Element => {\r\n  return (\r\n    <div className=\"landing\">\r\n      <div className=\"wrapper\">\r\n        <div className=\"landing__wrapper\">\r\n          <div className=\"landing__group\">\r\n          <h1 className='landing__title'>Calendar</h1>\r\n            <Link to=\"/calendar\" className=\"button button__add\">\r\n              get started\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Landing;\r\n","import { ModelUserType } from '../../services/getModelUser';\r\n\r\nimport * as constants from \"./authConstants\";\r\n\r\ntype SetAuthUserActionType = {\r\n  type: typeof constants.SET_AUTH_USER;\r\n  payload: ModelUserType;\r\n};\r\nexport function setAuthUser(user: ModelUserType ): SetAuthUserActionType {\r\n  return {\r\n    type: constants.SET_AUTH_USER,\r\n    payload: user,\r\n  };\r\n}\r\n\r\ntype SetLoadedActionType = {\r\n  type: typeof constants.SET_LOADED;\r\n  payload: boolean;\r\n};\r\nexport function setLoaded(boolean: boolean): SetLoadedActionType {\r\n  return {\r\n    type: constants.SET_LOADED,\r\n    payload: boolean,\r\n  };\r\n}\r\n","import * as constants from \"./modalConstants\";\r\nimport { UserMessageDataType1 } from '../../types/messagesDataTypes';\r\ntype OpenModalActionType = {\r\n  type: typeof constants.OPEN_MODAL\r\n  payload: string\r\n};\r\nexport const openModal = (modalType: string):OpenModalActionType => {\r\n  return {\r\n    type: constants.OPEN_MODAL,\r\n    payload: modalType\r\n  };\r\n};\r\n\r\ntype SetModalDataActionType = {\r\n  type: typeof constants.SET_MODAL_DATA\r\n  payload: UserMessageDataType1\r\n};\r\nexport const setModalData = (modalData: UserMessageDataType1): SetModalDataActionType => {\r\n  return {\r\n    type: constants.SET_MODAL_DATA,\r\n    payload: modalData\r\n  }\r\n};\r\n\r\ntype CloseModalActionType = {\r\n  type: typeof constants.CLOSE_MODAL\r\n};\r\nexport const closeModal = ():CloseModalActionType => {\r\n  return {\r\n    type: constants.CLOSE_MODAL,\r\n  };\r\n};\r\n","import axios from \"axios\";\r\nimport { Action } from \"redux\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\n\r\nimport { UserMessageDataType1 } from \"../../types/messagesDataTypes\";\r\nimport IStore from \"../interfaceStore\";\r\n\r\nimport * as constants from \"./messagesConstants\";\r\nimport { BACKEND_URL } from '../../data';\r\n\r\nexport type SetAllMessagesActionType = {\r\n  type: typeof constants.SET_ALL_MESSAGES;\r\n  payload: UserMessageDataType1[];\r\n};\r\nexport const setAllMessages = (messages: UserMessageDataType1[]): SetAllMessagesActionType => {\r\n  return {\r\n    type: constants.SET_ALL_MESSAGES,\r\n    payload: messages,\r\n  };\r\n};\r\n\r\nexport const requestAllMessages = (userId:number): ThunkAction<void, IStore, unknown, Action<string>> => (dispatch) => {\r\n  // axios.get(`${BACKEND_URL}/messages?_sort=id&_order=asc`) сортировка в обратном порядке\r\n    axios\r\n    .get(`${BACKEND_URL}/messages?userId=${userId}&_sort=dayId,currentHour&_order=asc`)\r\n    .then((res) => {\r\n      const messages = res.data;\r\n      dispatch(setAllMessages(messages));\r\n    });\r\n};\r\n\r\n","import * as constants from \"./calendarConstants\";\r\n\r\ntype SetAllStartDatesActionType = {\r\n  type: typeof constants.SET_ALL_START_DATES;\r\n  payload: Date;\r\n};\r\nexport function setAllStartDates(date: Date): SetAllStartDatesActionType {\r\n  return {\r\n    type: constants.SET_ALL_START_DATES,\r\n    payload: date,\r\n  };\r\n}\r\n\r\ntype SetCurrentHourActionType = {\r\n  type: typeof constants.SET_CURRENT_HOUR;\r\n  payload: number | null;\r\n};\r\nexport function setCurrentHour (currentHour: number | null):SetCurrentHourActionType{\r\n  return {\r\n    type: constants.SET_CURRENT_HOUR,\r\n    payload: currentHour,\r\n  };\r\n}\r\n\r\ntype UpdateSelectedDateActionType = {\r\n  type: typeof constants.UPDATE_SELECTED_DATE;\r\n  payload: Date;\r\n};\r\nexport function updateSelectedDate(date: Date): UpdateSelectedDateActionType {\r\n  return {\r\n    type: constants.UPDATE_SELECTED_DATE,\r\n    payload: date,\r\n  };\r\n}\r\n\r\ntype UpdateDataMonthActionType = {\r\n  type: typeof constants.UPDATE_DATA_MONTH;\r\n  payload: Date;\r\n};\r\nexport function updateDataMonth(date:Date):UpdateDataMonthActionType{\r\n  return{\r\n    type: constants.UPDATE_DATA_MONTH,\r\n    payload: date\r\n  }\r\n}","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport IStore from \"../../redux/interfaceStore\";\r\nimport { Loading } from \"../../pages\";\r\nimport { setAllStartDates, setLoaded, requestAllMessages } from \"../../redux/actions\";\r\n\r\nconst MainWrapper = ({ children }: { children:any }): JSX.Element => {\r\n  const { isLoaded } = useSelector((store: IStore) => store.auth);\r\n  const { id, role } = useSelector((store: IStore) => store.auth.user);\r\n  const dispatch = useDispatch();\r\n\r\n  React.useEffect(():()=> void => {\r\n    const date = new Date();\r\n    const currentDate = new Date(date.getFullYear(), date.getMonth(), date.getDate());\r\n    dispatch(setAllStartDates(currentDate));\r\n    dispatch(requestAllMessages(id!));\r\n    // временная фейк-запрос\r\n    setTimeout(() => dispatch(setLoaded(true)), 1000);\r\n    return () => dispatch(setLoaded(false));\r\n  }, [dispatch, id, role]);\r\n\r\n  return <React.Fragment>{isLoaded ? children : <Loading />}</React.Fragment>;\r\n};\r\n\r\nexport default MainWrapper;\r\n","import Validator from \"validator\";\r\nimport isEmpty from \"./isEmpty\";\r\n\r\ntype ValidationSignInPropsType = {\r\n  email: string;\r\n  password: string;\r\n}\r\ntype ValidationSignInErrorsType = {\r\n  email?: string;\r\n  password?: string;\r\n}\r\ntype ReturnValidationSignInType = {\r\n  errors: ValidationSignInErrorsType;\r\n  isValid: boolean;\r\n}\r\nfunction validationSignIn(data: ValidationSignInPropsType): ReturnValidationSignInType {\r\n  const errors: ValidationSignInErrorsType = {};\r\n\r\n  if (!Validator.isEmail(data.email)) {\r\n    errors.email = \"Email entered incorrectly\";\r\n  }\r\n\r\n  if (Validator.isEmpty(data.email)) {\r\n    errors.email = \"Enter your email\";\r\n  }\r\n\r\n  if (!Validator.isLength(data.password, { min: 6, max: 30 })) {\r\n    errors.password = \"The password must be at least 6 characters long\";\r\n  }\r\n\r\n  if (Validator.isEmpty(data.password)) {\r\n    errors.password = \"Enter password\";\r\n  }\r\n\r\n  return {\r\n    errors,\r\n    isValid: isEmpty(errors),\r\n  };\r\n}\r\n\r\nexport default validationSignIn;\r\n","import axios from \"axios\";\r\n\r\nfunction setAuthToken(token: string | false): void {\r\n  if (token) {\r\n    axios.defaults.headers.common[\"Authorization\"] = token;\r\n  } else {\r\n    axios.defaults.headers.common[\"Authorization\"] = null;\r\n  }\r\n}\r\nexport default setAuthToken;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport validationSignIn from \"../../services/validationSignIn\";\r\nimport setAuthToken from \"../../services/setAuthToken\";\r\nimport { setAuthUser } from \"../../redux/actions\";\r\nimport { StateSignInFormType, SignInFormPropsType, ErrorsSignInFormType } from \"../../types/signInFormTypes\";\r\nimport { DecodedTokenType } from \"../../types/decodedTokenTypes\";\r\nimport { ModelUserType } from '../../services/getModelUser'; \r\n\r\nimport { BACKEND_URL } from '../../data';\r\n\r\nconst SignInForm = ({ handleToggleButtonClick, registerUserEmail }: SignInFormPropsType): JSX.Element => {\r\n  const dispatch = useDispatch();\r\n  //возможно стоит перенести ошибки в redux хранилище\r\n  const [stateForm, setStateForm] = React.useState<StateSignInFormType>({\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n  const [errorsForm, setErrorsForm] = React.useState<ErrorsSignInFormType>({});\r\n\r\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setStateForm({\r\n      ...stateForm,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n    setErrorsForm({\r\n      ...errorsForm,\r\n      request: \"\",\r\n      [event.target.name]: \"\",\r\n    });\r\n  };\r\n\r\n  React.useEffect(()=>{\r\n    if(registerUserEmail) setStateForm({...stateForm, email: registerUserEmail});\r\n    //  не могу понять, в чем тут ошибка \r\n  },[registerUserEmail])\r\n\r\n  const handleSubmitForm = (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n    const { isValid, errors } = validationSignIn(stateForm);\r\n    if (isValid) {\r\n      // Возможно стоит перенести в action\r\n      axios\r\n        .post(`${BACKEND_URL}/signin`, stateForm)\r\n        .then((res: { data: { accessToken: string } }) => {\r\n          const { accessToken } = res.data;\r\n          localStorage.setItem(\"accessToken\", accessToken);\r\n          setAuthToken(accessToken);\r\n          const decodedToken: DecodedTokenType = jwt_decode(accessToken);\r\n          const idUser = decodedToken.sub;\r\n          axios\r\n            .get(`${BACKEND_URL}/data-users/${idUser}`)\r\n            .then((res: { data: ModelUserType }) => dispatch(setAuthUser(res.data)))\r\n            // .catch((err: { response: { data: string } }) => setErrorsForm({ request: err.response.data }))\r\n        })\r\n        .catch((err: { response: { data: string } }) => {\r\n          setErrorsForm({ request: err.response.data })\r\n        })\r\n    } else {\r\n      setErrorsForm(errors);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form className=\"sign-in-form\" onSubmit={handleSubmitForm}>\r\n      <h2 className=\"sign-in-form__title\">Sign In</h2>\r\n      \r\n      <div className=\"sign-in-form__error-request-feedback\">{errorsForm.request}</div>\r\n      \r\n      <div className=\"sign-in-form__group\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Email\"\r\n          className=\"input sign-in-form__input\"\r\n          name=\"email\"\r\n          value={stateForm.email}\r\n          onChange={handleInputChange}\r\n        />\r\n\r\n        <div className=\"sign-in-form__error-feedback\">{errorsForm.email}</div>\r\n        \r\n      </div>\r\n\r\n      <div className=\"sign-in-form__group\">\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          className=\"input sign-in-form__input\"\r\n          name=\"password\"\r\n          value={stateForm.password}\r\n          onChange={handleInputChange}\r\n        />\r\n\r\n        <div className=\"sign-in-form__error-feedback\">{errorsForm.password}</div>\r\n\r\n      </div>\r\n\r\n      <div className=\"sign-in-form__group-buttons\">\r\n        <button type='submit' className=\"button button__prim\">\r\n        Sign In\r\n        </button>\r\n        <p className=\"sign-in-form__group-buttons-text\">You are new? <span onClick={handleToggleButtonClick}>Create new</span></p>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default SignInForm;\r\n","import { StateSignUpFormType } from \"../types/signUpFormTypes\";\r\nimport { USER_ROLES } from \"../data\";\r\n\r\nexport type ModelUserType = {\r\n  id?: number;\r\n  name?: string;\r\n  email?: string;\r\n  role?: string;\r\n}\r\n\r\nfunction getModelUser(stateSignUpForm: StateSignUpFormType, userId: number): ModelUserType {\r\n  const { name, email } = stateSignUpForm;\r\n  const modelUser = {\r\n    id: userId,\r\n    name,\r\n    email,\r\n    role: USER_ROLES.USER,\r\n  };\r\n  return modelUser;\r\n}\r\n\r\nexport default getModelUser;\r\n","import Validator from \"validator\";\r\nimport isEmpty from \"./isEmpty\";\r\n\r\ntype ValidationSignUpPropsType = {\r\n  name: string;\r\n  email: string;\r\n  password: string;\r\n  password_confirmed: string;\r\n}\r\ntype ValidationSignUpErrorsType = {\r\n  name?: string;\r\n  email?: string;\r\n  password?: string;\r\n  password_confirmed?: string;\r\n}\r\ntype ReturnValidationSignUpType = {\r\n  errors: ValidationSignUpErrorsType;\r\n  isValid: boolean;\r\n}\r\n\r\nfunction validationSignUp(data: ValidationSignUpPropsType): ReturnValidationSignUpType {\r\n  const errors: ValidationSignUpErrorsType = {};\r\n\r\n  if (!Validator.isLength(data.name, { min: 2, max: 30 })) {\r\n    errors.name = \"Name must be between 2 and 30 characters\";\r\n  }\r\n\r\n  if (Validator.isEmpty(data.name)) {\r\n    errors.name = \"Enter your name\";\r\n  }\r\n\r\n  if (!Validator.isEmail(data.email)) {\r\n    errors.email = \"Email entered incorrectly\";\r\n  }\r\n\r\n  if (Validator.isEmpty(data.email)) {\r\n    errors.email = \"Enter your email\";\r\n  }\r\n\r\n  if (!Validator.isLength(data.password, { min: 6, max: 30 })) {\r\n    errors.password = \"The password must be at least 6 characters long\";\r\n  }\r\n\r\n  if (Validator.isEmpty(data.password)) {\r\n    errors.password = \"Enter password\";\r\n  }\r\n\r\n  if (!Validator.isLength(data.password_confirmed, { min: 6, max: 30 })) {\r\n    errors.password_confirmed =\r\n      \"The password must be at least 6 characters long\";\r\n  }\r\n\r\n  if (!Validator.equals(data.password, data.password_confirmed)) {\r\n    errors.password_confirmed = \"Password and confirm password must match\";\r\n  }\r\n\r\n  if (Validator.isEmpty(data.password_confirmed)) {\r\n    errors.password_confirmed = \"Enter password\";\r\n  }\r\n\r\n  return {\r\n    errors,\r\n    isValid: isEmpty(errors),\r\n  };\r\n}\r\n\r\nexport default validationSignUp;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\nimport getModelUser from \"../../services/getModelUser\";\r\nimport validationSignUp from \"../../services/validationSignUp\";\r\nimport { DecodedTokenType } from \"../../types/decodedTokenTypes\";\r\nimport { SignUpFormPropsType, StateSignUpFormType, ErrorsSignUpFormType } from \"../../types/signUpFormTypes\";\r\n\r\nimport { BACKEND_URL } from '../../data';\r\n\r\nconst SignUpForm = ({ handleToggleButtonClick, setRegisterUserEmail }: SignUpFormPropsType):JSX.Element => {\r\n  const [stateForm, setStateForm] = React.useState<StateSignUpFormType>({\r\n    name: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    password_confirmed: \"\",\r\n  });\r\n\r\n  const [errorsForm, setErrorsForm] = React.useState<ErrorsSignUpFormType>({});\r\n\r\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setStateForm({\r\n      ...stateForm,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n    setErrorsForm({\r\n      ...errorsForm,\r\n      request: \"\",\r\n      [event.target.name]: \"\",\r\n    });\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    setRegisterUserEmail(\"\");\r\n  },[setRegisterUserEmail]);\r\n\r\n  const handleSubmitForm = (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n    const { isValid, errors } = validationSignUp(stateForm);\r\n    if (isValid) {\r\n      // очень много логики, возможно нужно перенести в action или в services\r\n      const user = {\r\n        email: stateForm.email,\r\n        password: stateForm.password,\r\n      };\r\n      axios\r\n        .post(`${BACKEND_URL}/signup`, user)\r\n        .then((res: { data: { accessToken: string } }) => {\r\n          const { accessToken } = res.data;\r\n          const decodedToken: DecodedTokenType = jwt_decode(accessToken);\r\n          const userId = +decodedToken.sub;\r\n          const modelUser = getModelUser(stateForm, userId);\r\n          axios\r\n            .post(`${BACKEND_URL}/data-users`, modelUser)\r\n            .catch((err: { response: { data: string } }) => setErrorsForm({ request: err.response.data }));\r\n        })\r\n        .then(() => {\r\n          handleToggleButtonClick();\r\n          setRegisterUserEmail(user.email);\r\n        })\r\n        .catch((err: { response: { data: string } }) => setErrorsForm({ request: err.response.data }));\r\n    } else {\r\n      setErrorsForm(errors);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form className=\"sign-up-form\" onSubmit={handleSubmitForm}>\r\n      <h2 className=\"sign-up-form__title\">Sign Up</h2>\r\n    \r\n      <div className=\"sign-up-form__error-request-feedback\">{errorsForm.request}</div>\r\n    \r\n      <div className=\"sign-up-form__group\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Name\"\r\n          className=\"input sign-up-form__input\"\r\n          name=\"name\"\r\n          value={stateForm.name}\r\n          onChange={handleInputChange}\r\n        />\r\n      \r\n        <div className=\"sign-up-form__error-feedback\">{errorsForm.name}</div>\r\n        \r\n      </div>\r\n\r\n      <div className=\"sign-up-form__group\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Email\"\r\n          className=\"input sign-up-form__input\"\r\n          name=\"email\"\r\n          value={stateForm.email}\r\n          onChange={handleInputChange}\r\n        />\r\n        \r\n        <div className=\"sign-up-form__error-feedback\">{errorsForm.email}</div>\r\n        \r\n      </div>\r\n\r\n      <div className=\"sign-up-form__group\">\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          className=\"input sign-up-form__input\"\r\n          name=\"password\"\r\n          value={stateForm.password}\r\n          onChange={handleInputChange}\r\n        />\r\n        \r\n        <div className=\"sign-up-form__error-feedback\">{errorsForm.password}</div>\r\n        \r\n      </div>\r\n\r\n      <div className=\"sign-up-form__group\">\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"Password confirmed\"\r\n          className=\"input sign-up-form__input\"\r\n          name=\"password_confirmed\"\r\n          value={stateForm.password_confirmed}\r\n          onChange={handleInputChange}\r\n        />\r\n        \r\n        <div className=\"sign-up-form__error-feedback\">{errorsForm.password_confirmed}</div>\r\n        \r\n      </div>\r\n\r\n      <div className=\"sign-up-form__group-buttons\">\r\n        <button\r\n          type=\"submit\"\r\n          className=\"button button__prim\"\r\n        >\r\n          Sign Up\r\n        </button>\r\n        <p className=\"sign-up-form__group-buttons-text\">\r\n                Already have account? <span onClick={handleToggleButtonClick}>Login</span>\r\n        </p>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default SignUpForm;","// Преобразование числового значения часа в формат чч:мм\r\nfunction getTimeInFormat(hour: number): string {\r\n  return hour >= 10 ? `${hour}:00` : `0${hour}:00`;\r\n}\r\n\r\nexport default getTimeInFormat;","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport axios from \"axios\";\r\n\r\nimport IStore from \"../../../redux/interfaceStore\";\r\nimport { openModal, setCurrentHour, updateSelectedDate, setModalData } from \"../../../redux/actions\";\r\nimport getTimeInFormat from \"../../../services/getTimeInFormat\";\r\nimport { requestAllMessages } from \"../../../redux/messages/messagesActions\";\r\nimport { CardMessagePropsType } from '../../../types/cardMessageTypes';\r\n\r\nimport { BACKEND_URL, MODAL_TYPES } from '../../../data';\r\n\r\nconst CardMessage = ({ groupId, messageData}: CardMessagePropsType): JSX.Element => {\r\n  const authId = useSelector((store: IStore) => store.auth.user.id);\r\n  const authRole = useSelector((store: IStore) => store.auth.user.role);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleOpenModalClick = (modalType: string) => {\r\n    dispatch(setModalData(messageData))\r\n    if (groupId) {\r\n      const date = new Date(groupId);\r\n      dispatch(updateSelectedDate(date));\r\n    }\r\n    dispatch(setCurrentHour(messageData.currentHour!));\r\n    dispatch(openModal(modalType));\r\n  };\r\n  const handleRemoveButtonClick = () => {\r\n    axios\r\n      .delete(`${BACKEND_URL}/messages/${messageData.id}`)\r\n      .then(() => {\r\n        dispatch(requestAllMessages(authId!));\r\n    });\r\n\r\n  };\r\n\r\n  return (\r\n    <div className=\"card-message border_bottom\">\r\n      <h3 className=\"card-message__time\">{getTimeInFormat(messageData.currentHour!)}</h3>\r\n      <div className={`card-message__marker card-message__marker_${messageData.role!}`}>\r\n        {messageData.role![0]}\r\n      </div>\r\n      <h4 className=\"card-message__email\">{messageData.email}</h4>\r\n      <div className=\"card-message__message\">{messageData.message}</div>\r\n      <div className=\"card-message__buttons\">\r\n        <button\r\n          className=\"button button__prim\"\r\n          onClick={() => handleOpenModalClick(MODAL_TYPES.VIEW)}\r\n        >\r\n          View\r\n        </button>\r\n        {authId === messageData.userId  && (\r\n          <React.Fragment>\r\n            <button\r\n              className=\"button button__prim\"\r\n              onClick={() => handleOpenModalClick(MODAL_TYPES.UPDATE)}\r\n            >\r\n              Update\r\n            </button>\r\n            <button\r\n              className=\"button button__prim\"\r\n              onClick={handleRemoveButtonClick}\r\n            >\r\n              Remove\r\n            </button>\r\n          </React.Fragment>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardMessage;\r\n","function getDateInFormat(dateInMilliseconds: number): string {\r\n  const date = new Date(dateInMilliseconds);\r\n  const year = date.getFullYear();\r\n  const month = date.getMonth() + 1;\r\n  const day = date.getDate();\r\n  return `${day < 10 ? \"0\" + day : day}-${month < 10 ? \"0\" + month : month}-${year}`;\r\n}\r\n\r\nexport default getDateInFormat;\r\n","import React from \"react\";\r\n\r\nimport CardMessage from \"../../CardMessage\";\r\nimport getDateInFormat from \"../../../../services/getDateInFormat\";\r\nimport { GroupPropsType } from \"../../../../types/segmentGroupTypes\";\r\n\r\nconst SegmentGroup = ({ group }: { group: GroupPropsType }): JSX.Element => {\r\n  return (\r\n    <div className=\"segment-group\">\r\n      <h3 className=\"segment-group__date\">{getDateInFormat(group.groupId)}</h3>\r\n      {group.messages.map((message, index) => message && (\r\n        <CardMessage key={index} messageData={message} groupId={group.groupId}/>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SegmentGroup;\r\n","function verificationFilterInput(currentValueInput: string):string {\r\n  // описать верификацию в формате dd/mm/yyyy\r\n  return currentValueInput;\r\n}\r\n\r\nexport default verificationFilterInput;\r\n","import isEmpty from \"./isEmpty\";\r\nimport { REG_EXP_CHECK_DATE } from '../data';\r\n\r\nexport type ValidationFilterFormPropsType = {\r\n  startParam: string\r\n  endParam: string\r\n}\r\nexport type ValidationFilterFormErrorsType = {\r\n  startParam?: string\r\n  endParam?: string\r\n  warning?:string \r\n}\r\nexport type ReturnValidationFilterFormType = {\r\n  errors: ValidationFilterFormErrorsType\r\n  isValid: boolean\r\n}\r\n\r\nfunction validationFilterForm(data: ValidationFilterFormPropsType): ReturnValidationFilterFormType {\r\n  const errors: ValidationFilterFormErrorsType = {};\r\n  if (!data.startParam.match(REG_EXP_CHECK_DATE)) {\r\n    errors.startParam = \"Date entered in the wrong format\";\r\n  }\r\n  if (!data.endParam.match(REG_EXP_CHECK_DATE)) {\r\n    errors.endParam = \"Date entered in the wrong format\";\r\n  }\r\n  if (isEmpty(data.startParam)) {\r\n    errors.startParam = \"Enter the date\";\r\n  }\r\n  if (isEmpty(data.endParam)) {\r\n    errors.endParam = \"Enter the date\";\r\n  }\r\n  return {\r\n    errors,\r\n    isValid: isEmpty(errors),\r\n  };\r\n}\r\n\r\nexport default validationFilterForm;\r\n","import { UserMessageDataType1 } from \"../types/messagesDataTypes\";\r\n\r\nexport default function groupMessagesByDay(messages: UserMessageDataType1[]) {\r\n  const daysId = Array.from(new Set(messages.map((el) => el.dayId)));\r\n  return daysId.map(id => {\r\n    const daysId = id ? { groupId: id } : null;\r\n    return {\r\n      ...daysId,\r\n      messages: messages.filter(device => device.dayId === id)\r\n    };\r\n  });\r\n}\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport IStore from \"../../../redux/interfaceStore\";\r\nimport SegmentGroup from \"./SegmentGroup\";\r\nimport verificationFilterInput from \"../../../services/verificationFilterInput\";\r\nimport getDateInFormat from \"../../../services/getDateInFormat\";\r\nimport validationFilterForm, { ValidationFilterFormPropsType, ValidationFilterFormErrorsType } from \"../../../services/validationFilterForm\";\r\nimport { UserMessageDataType1 } from '../../../types/messagesDataTypes';\r\nimport groupMessagesByDay from \"../../../services/groupMessagesByDay\";\r\n\r\nconst Segment = ({ propsMessages }: {propsMessages?: UserMessageDataType1[]}): JSX.Element => {\r\n  const { messages } = useSelector((store: IStore) => store.messages);\r\n  \r\n  const [messagesLocalStorage, setMessagesLocalStorage] = React.useState<UserMessageDataType1[]>([]);\r\n  const [errorsFilter, setErrorsFilter] = React.useState<ValidationFilterFormErrorsType>({});\r\n\r\n  const [paramsFilter, setParamFilter] = React.useState<ValidationFilterFormPropsType>({\r\n    startParam: \"\",\r\n    endParam: \"\",\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    if(propsMessages){\r\n      setMessagesLocalStorage(propsMessages)\r\n    }else{\r\n      setMessagesLocalStorage(messages)\r\n    }\r\n  }, [messages, propsMessages]);\r\n\r\n\r\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setParamFilter({\r\n      ...paramsFilter,\r\n      [event.target.name]: verificationFilterInput(event.target.value),\r\n    });\r\n    setErrorsFilter({\r\n      ...errorsFilter,\r\n      [event.target.name]: \"\",\r\n      warning: \"\",\r\n    });\r\n  };\r\n\r\n  const handleSubmitForm = (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n    const { isValid, errors } = validationFilterForm(paramsFilter);\r\n    if (isValid) {\r\n      const arrayStartParam = paramsFilter.startParam.split(\"/\");\r\n      const arrayEndParam = paramsFilter.endParam.split(\"/\");\r\n      let indexStartParam = new Date(+arrayStartParam[2], +arrayStartParam[1] - 1, +arrayStartParam[0]).getTime();\r\n      let indexEndParam = new Date(+arrayEndParam[2], +arrayEndParam[1] - 1, +arrayEndParam[0]).getTime();\r\n\r\n      if (indexStartParam < indexEndParam) {\r\n        [indexStartParam, indexEndParam] = [indexEndParam, indexStartParam];\r\n        setParamFilter({\r\n          ...paramsFilter,\r\n          startParam: paramsFilter.endParam,\r\n          endParam: paramsFilter.startParam,\r\n        });\r\n        setErrorsFilter({\r\n          ...errorsFilter,\r\n          warning: \"Dates are swapped\",\r\n        });\r\n      }\r\n      const filteredData = messagesLocalStorage.filter((el: UserMessageDataType1) => el.dayId! <= indexStartParam && el.dayId! >= indexEndParam);\r\n      setMessagesLocalStorage(filteredData);\r\n    } else {\r\n      setErrorsFilter(errors);\r\n    }\r\n  };\r\n\r\n  const handleResetButtonClick = () => {\r\n    if(propsMessages){\r\n      setMessagesLocalStorage(propsMessages)\r\n    }else{\r\n      setMessagesLocalStorage(messages)\r\n    }\r\n    setErrorsFilter({});\r\n  }\r\n\r\n  return (\r\n    <div className=\"segment\">\r\n      <div className=\"segment__header border_bottom\">\r\n        {/* возможно нужно вынести filter в отдельный компонент ??? */}\r\n        <h2 className=\"segment__header-title\">\r\n          {messagesLocalStorage.length > 1 &&\r\n            `Notes from ${getDateInFormat(messagesLocalStorage[0].dayId!)} to ${getDateInFormat(messagesLocalStorage[messagesLocalStorage.length - 1].dayId!)}`}\r\n\r\n          {messagesLocalStorage.length === 1 &&\r\n            `Notes for the ${getDateInFormat(messagesLocalStorage[0].dayId!)}`}\r\n\r\n          {messagesLocalStorage.length === 0 && `No notes`}\r\n        </h2>\r\n        <form className=\"filter-messages-form\" onSubmit={handleSubmitForm}>\r\n\r\n          <div className=\"filter-messages-form__warning-feedback\">{errorsFilter.warning}</div>\r\n\r\n          <div className=\"filter-messages-form__wrapper\">\r\n            <div className=\"filter-messages-form__group\">\r\n              <input\r\n                className=\"filter-messages-form__input\"\r\n                type=\"text\"\r\n                name=\"startParam\"\r\n                value={paramsFilter.startParam}\r\n                onChange={handleInputChange}\r\n                placeholder=\"dd/mm/yyyy\"\r\n              />\r\n\r\n              <div className=\"filter-messages-form__error-feedback\">{errorsFilter.startParam}</div>\r\n\r\n            </div>\r\n            <div className=\"filter-messages-form__group\">\r\n              <input\r\n                className=\"filter-messages-form__input\"\r\n                type=\"text\"\r\n                name=\"endParam\"\r\n                value={paramsFilter.endParam}\r\n                onChange={handleInputChange}\r\n                placeholder=\"dd/mm/yyyy\"\r\n              />\r\n\r\n              <div className=\"filter-messages-form__error-feedback\">{errorsFilter.endParam}</div>\r\n\r\n            </div>\r\n          </div>\r\n          <div className=\"filter-messages-form__buttons\">\r\n          <button className=\"button button__prim filter-messages-form__button\">\r\n            filter\r\n          </button>\r\n          <button type='button' className=\"button button__prim filter-messages-form__button\" onClick={handleResetButtonClick}>\r\n            reset\r\n          </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n      {messagesLocalStorage && (\r\n        <React.Fragment>\r\n          {groupMessagesByDay(messagesLocalStorage).map((el: any, index: number) => <SegmentGroup key={index} group={el} /> )}\r\n        </React.Fragment>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Segment;\r\n","import React from \"react\";\r\nimport { useRouteMatch } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { BACKEND_URL, USER_ROLES } from \"../../data\";\r\nimport { UserMessageDataType1 } from \"../../types/messagesDataTypes\";\r\nimport { Loading } from \"../../pages\";\r\nimport Segment from \"../Calendar/Segment\";\r\n\r\ntype MatchType = {\r\n  params: {\r\n    userId?: string;\r\n  };\r\n};\r\n\r\ntype SelectedUserDataState = {\r\n  email?: string;\r\n  id?: number;\r\n  name?: string;\r\n  role?: string;\r\n};\r\nconst SelectedUserData = (): JSX.Element => {\r\n  const {\r\n    params: { userId },\r\n  }: MatchType = useRouteMatch();\r\n\r\n  const [userData, setUserData] = React.useState<SelectedUserDataState | null>(\r\n    null\r\n  );\r\n  const [userMessages, setUserMessages] = React.useState<\r\n    UserMessageDataType1[] | null\r\n  >(null);\r\n\r\n  const getAllDataUser = async () => {\r\n    try {\r\n      const user = await axios.get(`${BACKEND_URL}/data-users/${userId}`);\r\n      const messages = await axios.get(\r\n        `${BACKEND_URL}/messages?userId=${userId}&_sort=dayId,currentHour&_order=asc`\r\n      );\r\n      setUserData({\r\n        ...user.data,\r\n      });\r\n      setUserMessages(messages.data);\r\n    } catch (e) {\r\n    } finally {\r\n      console.log(userData);\r\n    }\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    getAllDataUser();\r\n  }, [userId]);\r\n\r\n  const handleUpdateRoleClick = (role: string) => {\r\n    const updateDataUser = {\r\n      ...userData,\r\n      role,\r\n    };\r\n    axios\r\n      .put(`${BACKEND_URL}/data-users/${userData!.id}`, updateDataUser)\r\n      .then(() => {\r\n        getAllDataUser();\r\n      });\r\n    console.log(\r\n      `Смена роли пользователя ${userData!.email} с ${\r\n        userData!.role\r\n      } на ${role} с последующим запросом на обновленный лист users`\r\n    );\r\n  };\r\n\r\n  return userMessages && userData ? (\r\n    <React.Fragment>\r\n      <div className=\"user-update\">\r\n        <div className=\"user-update__group\">\r\n          <h2 className=\"user-update-role__email\">{userData.email}</h2>\r\n          <div className=\"user-update-role__buttons\">\r\n            <button\r\n              className={`button button__add ${\r\n                userData.role === USER_ROLES.USER ? \"button_selected\" : \"\"\r\n              }`}\r\n              onClick={() => handleUpdateRoleClick(USER_ROLES.USER)}\r\n            >\r\n              {USER_ROLES.USER}\r\n            </button>\r\n            <button\r\n              className={`button button__add ${\r\n                userData.role === USER_ROLES.ADMIN ? \"button_selected\" : \"\"\r\n              }`}\r\n              onClick={() => handleUpdateRoleClick(USER_ROLES.ADMIN)}\r\n            >\r\n              {USER_ROLES.ADMIN}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <Segment propsMessages={userMessages} />\r\n    </React.Fragment>\r\n  ) : (\r\n    <Loading />\r\n  );\r\n};\r\n\r\nexport default SelectedUserData;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport IStore from \"../../../redux/interfaceStore\";\r\nimport { openModal, setCurrentHour } from \"../../../redux/actions\";\r\nimport getTimeInFormat from \"../../../services/getTimeInFormat\";\r\n\r\nimport { MODAL_TYPES, USER_ROLES } from '../../../data';\r\n\r\nconst CardEmpty = ({ currentHour }: { currentHour: number }): JSX.Element => {\r\n  const { role } = useSelector((store: IStore) => store.auth.user);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleOpenModalClick = () => {\r\n    dispatch(setCurrentHour(currentHour));\r\n    dispatch(openModal(MODAL_TYPES.ADD));\r\n  };\r\n\r\n  return (\r\n    <div className=\"card-message border_bottom\">\r\n      <h3 className=\"card-message__time\">{getTimeInFormat(currentHour)}</h3>\r\n      <div className=\"card-message__message\">Add note...</div>\r\n      <div className=\"card-message__buttons\">\r\n        {USER_ROLES.VIEWER !== role && (\r\n          <button\r\n            className=\"button button__prim\"\r\n            onClick={handleOpenModalClick}\r\n          >\r\n            Add\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardEmpty;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport IStore from \"../../../redux/interfaceStore\";\r\nimport CardMessage from \"../CardMessage\";\r\nimport { UserMessageDataType1 } from '../../../types/messagesDataTypes';\r\nimport getDateInFormat from '../../../services/getDateInFormat';\r\nimport CardEmpty from \"../CardEmpty\";\r\n\r\nconst Day = (): JSX.Element => {\r\n  const { idSelectedDate, selectedDate } = useSelector((store: IStore) => store.calendar);\r\n  const { messages } = useSelector((store: IStore) => store.messages);\r\n  const { id } = useSelector((store: IStore) => store.auth.user);\r\n  const messagesTargetDay = messages.filter((messagesDay: UserMessageDataType1) => messagesDay.dayId === idSelectedDate && messagesDay.userId === id);\r\n\r\n  return (\r\n    <div className=\"day-list\">\r\n      <div className=\"day-list__header border_bottom\">\r\n        <div className=\"day-list__day-name\">\r\n          {getDateInFormat(selectedDate!.getTime())}\r\n        </div>\r\n      </div>\r\n      <div className=\"day-list__group\">\r\n        {Array(24).fill(null).map((el, index: number) => {\r\n          const message = messagesTargetDay.find(el=> el.currentHour === index);\r\n          if(message) return <CardMessage key={index} messageData={message} />\r\n          return <CardEmpty key={index} currentHour={index} />\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Day;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RouteComponentProps, withRouter, useRouteMatch } from \"react-router-dom\";\r\n\r\nimport IStore from \"../../../../redux/interfaceStore\";\r\nimport { UserMessageDataType1 } from '../../../../types/messagesDataTypes';\r\nimport isEmpty from '../../../../services/isEmpty';\r\nimport { updateSelectedDate } from \"../../../../redux/actions\";\r\nimport { DayDataType } from \"../../../../redux/calendar/calendarReducer\";\r\nimport getTimeInFormat from \"../../../../services/getTimeInFormat\";\r\n\r\nexport interface DayOfTheWeekPropsType extends RouteComponentProps<any> {\r\n  dayData: DayDataType;\r\n}\r\nconst DayOfTheWeek = ({ history, dayData: { date, isCurrentMonth }}: DayOfTheWeekPropsType): JSX.Element => {\r\n  const { messages } = useSelector((store: IStore) => store.messages);\r\n  const { id } = useSelector((store: IStore) => store.auth.user);\r\n  const dispatch = useDispatch();\r\n  const { path } = useRouteMatch();\r\n  const [localStorage, setLocalStorage] = React.useState<UserMessageDataType1[]>([]);\r\n\r\n  React.useEffect(() => {\r\n    setLocalStorage([]);\r\n    const messagesDay = messages.filter((el: UserMessageDataType1) => el.dayId === date.getTime() && el.userId === id).slice(0,3);\r\n    if(!isEmpty(messagesDay)){\r\n      setLocalStorage(messagesDay);\r\n    } \r\n  }, [date, id, messages]);\r\n\r\n  const handleSelectedDateClick = () => {\r\n    dispatch(updateSelectedDate(date));\r\n    history.push(`${path}/day`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"month-list__day\">\r\n      <div\r\n        className={`month-list__day-header ${\r\n          isCurrentMonth\r\n            ? \"month-list__day-header_current\"\r\n            : \"month-list__day-header_other\"\r\n        }`}\r\n        onClick={handleSelectedDateClick}\r\n      >\r\n        <div className=\"month-list__day-number\">{date.getDate()}</div>\r\n      </div>\r\n      <ul className=\"month-list__day-tasks\">\r\n        {!isEmpty(localStorage) &&\r\n          localStorage.map((el, index: number) => (\r\n            <li key={index} className=\"month-list__day-task\">\r\n              <h3 className=\"month-list__day-task-time\">\r\n                {getTimeInFormat(el.currentHour!)}\r\n              </h3>\r\n              <p className=\"month-list__day-task-text\">{el.message}</p>\r\n            </li>\r\n          ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(DayOfTheWeek);\r\n","import React from \"react\";\r\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\r\n\r\nimport { DayDataType } from \"../../../../redux/calendar/calendarReducer\";\r\nimport DayOfTheWeek from \"../DayOfTheWeek\";\r\n\r\nexport interface WeekOfTheMonthPropTypes extends RouteComponentProps<any> {\r\n  weekData: DayDataType[];\r\n  weekNumber: number;\r\n}\r\n\r\nconst WeekOfTheMonth = ({ weekData, weekNumber }: WeekOfTheMonthPropTypes): JSX.Element => {\r\n  return (\r\n    <div key={weekNumber} className=\"month-list__week border_bottom\">\r\n      {weekData.map((day, index) => (\r\n        <DayOfTheWeek key={index} dayData={day} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(WeekOfTheMonth);\r\n","import React from \"react\";\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport IStore from \"../../../redux/interfaceStore\";\r\nimport { DayDataType } from \"../../../redux/calendar/calendarReducer\";\r\nimport WeekOfTheMonth from './WeekOfTheMonth';\r\n\r\nimport { WEEK_DAY_NAMES } from '../../../data';\r\n\r\nconst Month = (): JSX.Element => {\r\n  const { data } = useSelector((store: IStore) => store.calendar);\r\n  \r\n  return  (\r\n    <div className=\"month-list\">\r\n      <div className=\"month-list__header border_bottom\">\r\n        {WEEK_DAY_NAMES.map((name, index) => (\r\n          <span key={index} className=\"month-list__day-name\">\r\n            {name}\r\n          </span>\r\n        ))}\r\n      </div>\r\n      {data?.map((week: DayDataType[], index: number) => (\r\n        <WeekOfTheMonth key={index} weekData={week} weekNumber={index} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\nexport default Month;\r\n","import React from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\n\r\nimport Day from \"./Day\";\r\nimport Segment from \"./Segment\";\r\nimport Month from \"./Month\";\r\nimport { SelectedUserData } from \"..\";\r\n\r\nconst Calendar = (): JSX.Element => {\r\n  return (\r\n    <div className=\"calendar\">\r\n      <Switch>\r\n        <Route exact path=\"/calendar\" component={Month} />\r\n        <Route exact path=\"/calendar/user-data/:userId\" component={SelectedUserData} />\r\n        <Route exact path=\"/calendar/segment\" component={Segment} />\r\n        <Route exact path=\"/calendar/day\" component={Day} />\r\n        {/* <Route component={NotFound} /> */}\r\n      </Switch>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Calendar;\r\n","import React from \"react\";\r\nimport { withRouter, useRouteMatch } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport IStore from \"../../../../redux/interfaceStore\";\r\nimport { DayOfTheWeekPropsType } from \"../../Month/DayOfTheWeek\";\r\nimport { updateSelectedDate } from \"../../../../redux/actions\";\r\n\r\nconst WidgetDayOfTheWeek = ({ history, dayData: { date, isCurrentMonth } }: DayOfTheWeekPropsType): JSX.Element => {\r\n  const { path } = useRouteMatch();\r\n  const dispatch = useDispatch();\r\n  const { selectedDate, currentDate } = useSelector((store: IStore) => store.calendar);\r\n\r\n  const isCurrentDate = currentDate!.getTime() === date.getTime();\r\n  const isSelectedDate = selectedDate && selectedDate.getTime() === date.getTime();\r\n  \r\n  const handleSelectedDateClick =()=>{\r\n    dispatch(updateSelectedDate(date))\r\n    history.push(`${path}/day`);\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={`widget-month__day \r\n      ${!isCurrentMonth ? \"widget-month__day_shadowed\" : \"\"} \r\n      ${isCurrentDate ? \"widget-month__day_current\" : \"\"}\r\n      ${isSelectedDate ? \"widget-month__day_selected\" : \"\"}`}\r\n      onClick={handleSelectedDateClick}\r\n    >\r\n      <span className=\"widget-month__day__number\">{date.getDate()}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(WidgetDayOfTheWeek);","import React from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { WeekOfTheMonthPropTypes } from \"../../Month/WeekOfTheMonth\";\r\nimport WidgetDayOfTheWeek from \"../WidgetDayOfTheWeek\";\r\n\r\nconst WidgetWeekOfTheMonth = ({ weekData, weekNumber }: WeekOfTheMonthPropTypes) => {\r\n  return (\r\n    <div key={weekNumber} className=\"widget-month__week\">\r\n      {weekData.map((day, index: number) => (\r\n        <WidgetDayOfTheWeek key={index} dayData={day} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(WidgetWeekOfTheMonth);\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport IStore from \"../../../redux/interfaceStore\";\r\nimport { updateDataMonth } from \"../../../redux/actions\";\r\n\r\nconst MonthToggle = (): JSX.Element => {\r\n  const dispatch = useDispatch();\r\n  const { basicDate } = useSelector((store: IStore) => store.calendar);\r\n\r\n  const handlePrevMonthButtonClick = () => {\r\n    const date = new Date(basicDate!.getFullYear(), basicDate!.getMonth() - 1);\r\n    dispatch(updateDataMonth(date));\r\n  };\r\n\r\n  const handleNextMonthButtonClick = () => {\r\n    const date = new Date(basicDate!.getFullYear(), basicDate!.getMonth() + 1);\r\n    dispatch(updateDataMonth(date));\r\n  };\r\n\r\n  return (\r\n    <div className=\"month-toggle\">\r\n      <button\r\n        className=\"month-toggle__button\"\r\n        onClick={handlePrevMonthButtonClick}\r\n      >\r\n        ❮\r\n      </button>\r\n      <button\r\n        className=\"month-toggle__button\"\r\n        onClick={handleNextMonthButtonClick}\r\n      >\r\n        ❯\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\nexport default MonthToggle;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport IStore from \"../../../redux/interfaceStore\";\r\nimport { DayDataType } from \"../../../redux/calendar/calendarReducer\";\r\nimport WidgetWeekOfTheMonth from \"./WidgetWeekOfTheMonth\";\r\nimport MonthToggle from \"../MonthToggle\";\r\n\r\nimport { MONTH_NAMES, WEEK_DAY_NAMES } from '../../../data';\r\n\r\nconst WidgetMonth = (): JSX.Element => {\r\n  const { basicDate, data } = useSelector((store: IStore) => store.calendar);\r\n\r\n  return (\r\n    <div className=\"widget-month border_bottom\">\r\n      <div className=\"widget-month__header border_bottom\">\r\n        <h3 className=\"widget-month__date\">\r\n          {MONTH_NAMES[basicDate!.getMonth()]}{\" \"}\r\n          {basicDate!.getFullYear()}\r\n        </h3>\r\n        <MonthToggle />\r\n      </div>\r\n      <div className=\"widget-month__list border_bottom\">\r\n        <div className=\"widget-month__list-header\">\r\n          {WEEK_DAY_NAMES.map((name: string, index: number) => (\r\n            <span key={index} className=\"widget-month__day-name\">\r\n              {name}\r\n            </span>\r\n          ))}\r\n        </div>\r\n        {data!.map((weekData: DayDataType[], index: number) => (\r\n          <WidgetWeekOfTheMonth\r\n            key={index}\r\n            weekData={weekData}\r\n            weekNumber={index}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WidgetMonth;\r\n","import React from \"react\";\r\nimport { Link, useRouteMatch } from \"react-router-dom\";\r\n\r\nimport { ModelUserType } from \"../../../services/getModelUser\";\r\n\r\nconst UserItem = ({ user }: { user: ModelUserType }): JSX.Element => {\r\n  const { path } = useRouteMatch();\r\n\r\n  console.log(path)\r\n\r\n  return (\r\n    <li className={`user user_decor-${user.role}`}>\r\n      <Link to={`${path}/user-data/${user.id}`}>\r\n        <h4 className=\"user__email\">{user.email}</h4>\r\n      </Link>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default UserItem;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport UserItem from \"./UserItem\";\r\nimport { ModelUserType } from \"../../services/getModelUser\";\r\nimport IStore from \"../../redux/interfaceStore\";\r\n\r\nimport { BACKEND_URL } from '../../data';\r\n\r\nconst UsersList = (): JSX.Element => {\r\n  const { id } = useSelector((store: IStore) => store.auth.user);\r\n  const [isLoaded, setIsLoaded] = React.useState(false);\r\n  const [listUsers, setListUsers] = React.useState<ModelUserType[]>([]);\r\n\r\n  const setAllUsers = React.useCallback(() => {\r\n    axios\r\n      .get(`${BACKEND_URL}/data-users/?id_ne=${id}`)\r\n      .then((res) => {\r\n        const listUsers = res.data;\r\n        setListUsers(listUsers);\r\n        setIsLoaded(true);\r\n      });\r\n  }, [id]);\r\n\r\n  React.useEffect(() => {\r\n    setAllUsers();\r\n  }, [setAllUsers]);\r\n\r\n  return (\r\n    <div className=\"users-list\">\r\n      <h2 className=\"users-list__title border_bottom\">All users</h2>\r\n      {isLoaded ? (\r\n        <ul className=\"users-list__users border_bottom\">\r\n          {listUsers.map((user: ModelUserType, index: number) => (\r\n            <UserItem key={index} user={user} />\r\n          ))}\r\n        </ul>\r\n      ) : (\r\n        <div>Loading</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UsersList;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport IStore from \"../../redux/interfaceStore\";\r\nimport WidgetMonth from '../Calendar/WidgetMonth';\r\nimport UsersList from \"../UsersList\";\r\n\r\nimport { USER_ROLES } from '../../data';\r\n\r\nconst SideBar = ({ isOpenSideBar }: { isOpenSideBar: boolean }): JSX.Element => {\r\n  const { role, email } = useSelector((store: IStore) => store.auth.user);\r\n\r\n  return (\r\n    <div className={`side-bar ${isOpenSideBar ? \"side-bar_visible\" : \"\"}`}>\r\n      <div className ='side-bar__wrapper'>\r\n      <h2 className=\"side-bar__email border_bottom\">{email}</h2>\r\n\r\n      <WidgetMonth />\r\n      {role === USER_ROLES.ADMIN ? <UsersList /> : null}\r\n    </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SideBar;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport IStore from \"../../redux/interfaceStore\";\r\nimport { updateDataMonth, updateSelectedDate } from \"../../redux/actions\";\r\nimport MonthToggle from \"../Calendar/MonthToggle\";\r\n\r\nimport { MONTH_NAMES } from '../../data';\r\n\r\ntype HeaderPropsType = {\r\n  isOpenSideBar: boolean;\r\n  setIsOpenSideBar: React.Dispatch<boolean>;\r\n}\r\n\r\nconst Header = ({ isOpenSideBar, setIsOpenSideBar }: HeaderPropsType): JSX.Element => {\r\n    // Не знаю как решить данную проблему, связанную с вариативностью типов basicDate, currentDate\r\n  const dispatch = useDispatch();\r\n  const { basicDate, currentDate } = useSelector((store: IStore) => store.calendar);\r\n  const { email } = useSelector((store: IStore) => store.auth.user);\r\n\r\n  const handleCurrentDateButtonClick = () => {\r\n    dispatch(updateSelectedDate(currentDate!));\r\n    dispatch(updateDataMonth(currentDate!));\r\n  };\r\n  \r\n  const handleToggleAsideButtonClick = () => {\r\n    setIsOpenSideBar(!isOpenSideBar);\r\n  };\r\n\r\n  return (\r\n    <header className=\"header border_bottom\">\r\n      <div className=\"wrapper\">\r\n        <div className=\"header__wrapper\">\r\n          <div className=\"header__group\">\r\n            <span className=\"hamburger\" onClick={handleToggleAsideButtonClick}>\r\n              <span className=\"hamburger__line\"></span>\r\n            </span>\r\n            <h2 className=\"header__email\">{email}</h2>\r\n            <MonthToggle />\r\n            <h2 className=\"header__date\">\r\n              {MONTH_NAMES[basicDate!.getMonth()]}{\" \"}\r\n              {basicDate!.getFullYear()}\r\n            </h2>\r\n            <Link to=\"/calendar\" className=\"button header__button button__add\">\r\n              calendar\r\n            </Link>\r\n            <Link to=\"/calendar/segment\" className=\"button header__button button__add\">\r\n              all notes\r\n            </Link>\r\n            <Link\r\n              to=\"/calendar/day\"\r\n              className=\"button header__button button__add\"\r\n              onClick={handleCurrentDateButtonClick}\r\n            >\r\n              today\r\n            </Link>\r\n          </div>\r\n\r\n          <Link to=\"/logout\" className=\"button header__button button__add\">\r\n            logout\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { useSelector } from \"react-redux\";\r\nimport IStore from \"../redux/interfaceStore\";\r\nimport { UserMessageDataType1 } from \"../types/messagesDataTypes\";\r\nimport isEmpty from \"../services/isEmpty\";\r\n\r\n\r\nexport default function useModalMessageObject(){\r\n  const modalMessageObject: UserMessageDataType1 = useSelector((store:IStore) => store.modal.modalData);\r\n  const { idSelectedDate, currentHour } = useSelector((store: IStore) => store.calendar);\r\n  const { email, id, role } = useSelector((store: IStore) => store.auth.user); \r\n\r\n  if(!isEmpty(modalMessageObject)){\r\n    return modalMessageObject\r\n  }else{\r\n    return {\r\n      userId: id!,\r\n      title: \"\",\r\n      message: \"\",\r\n      currentHour: currentHour!,\r\n      email: email!,\r\n      role: role!,\r\n      dayId: idSelectedDate!,\r\n    } \r\n  }\r\n}","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport IStore from \"../../redux/interfaceStore\";\r\nimport isEmpty from \"../../services/isEmpty\";\r\nimport getDateInFormat from \"../../services/getDateInFormat\";\r\nimport getTimeInFormat from \"../../services/getTimeInFormat\";\r\nimport { UserMessageDataType1 } from '../../types/messagesDataTypes';\r\nimport { requestAllMessages, setCurrentHour, closeModal } from \"../../redux/actions\";\r\n\r\nimport { BACKEND_URL, MODAL_TYPES } from '../../data';\r\nimport useModalMessageObject from \"../../hooks/useMessageObject\";\r\n\r\nfunction AddUpdateMessageModal(): JSX.Element {\r\n  const dispatch = useDispatch();\r\n\r\n  const messageObject = useModalMessageObject();\r\n  const { modalType } = useSelector((store: IStore) => store.modal);\r\n  const [stateMessageModal, setStateMessageModal] = React.useState<UserMessageDataType1>(messageObject);\r\n\r\n  const handleInputChange = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\r\n    setStateMessageModal({\r\n      ...stateMessageModal,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  const handleAddUpdateButtonClick = () => {\r\n    if (!isEmpty(stateMessageModal.message)) {\r\n      if (stateMessageModal.id) {\r\n        axios\r\n          .put( `${BACKEND_URL}/messages/${stateMessageModal.id}`, stateMessageModal)\r\n          .then(() => {\r\n            dispatch(requestAllMessages(stateMessageModal.userId!));\r\n            dispatch(setCurrentHour(null));\r\n            dispatch(closeModal());\r\n          });\r\n      } else {\r\n        axios\r\n          .post(`${BACKEND_URL}/messages`, stateMessageModal)\r\n          .then(() => {\r\n            dispatch(requestAllMessages(stateMessageModal.userId!));\r\n            dispatch(setCurrentHour(null));\r\n            dispatch(closeModal());\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"add-update-message-card\">\r\n      <div className=\"add-update-message-card__header\">\r\n\r\n        <h3 className=\"add-update-message-card__date\">\r\n          Date: {getDateInFormat(stateMessageModal.dayId!)} \r\n          <br />\r\n          <br /> \r\n          Time: {getTimeInFormat(stateMessageModal.currentHour!)}\r\n        </h3>\r\n\r\n        <h3 className=\"add-update-message-card__author\">{stateMessageModal.email}</h3>\r\n\r\n      </div>\r\n\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"title\"\r\n        className=\"input add-update-message-card__input\"\r\n        name=\"title\"\r\n        value={stateMessageModal.title}\r\n        onChange={handleInputChange}\r\n      />\r\n\r\n      <textarea\r\n        placeholder=\"note\"\r\n        className=\"input add-update-message-card__textarea\"\r\n        name=\"message\"\r\n        value={stateMessageModal.message}\r\n        onChange={handleInputChange}\r\n      />\r\n\r\n      <div className=\"add-update-message-card__buttons\">\r\n        {MODAL_TYPES.UPDATE === modalType && (\r\n          <button\r\n            className=\"button button__prim\"\r\n            onClick={handleAddUpdateButtonClick}\r\n          >\r\n            update\r\n          </button>\r\n        )}\r\n\r\n        {MODAL_TYPES.ADD === modalType && (\r\n          <button\r\n            className=\"button button__prim\"\r\n            onClick={handleAddUpdateButtonClick}\r\n          >\r\n            add\r\n          </button>\r\n        )}\r\n        \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddUpdateMessageModal;\r\n","import React from \"react\";\r\n\r\nimport getDateInFormat from \"../../services/getDateInFormat\";\r\nimport getTimeInFormat from \"../../services/getTimeInFormat\";\r\nimport useModalMessageObject from \"../../hooks/useMessageObject\";\r\n\r\nfunction ViewMessageModal(): JSX.Element {\r\n\r\n  const messageObject = useModalMessageObject();\r\n\r\n  return (\r\n    <div className=\"view-message-card\">\r\n      <div className=\"view-message-card__header\">\r\n        <h3 className=\"view-message-card__date\">\r\n          Date: {getDateInFormat(messageObject.dayId!)}\r\n          <br />\r\n          <br />\r\n          Time: {getTimeInFormat(messageObject.currentHour!)}\r\n        </h3>\r\n        <h3 className=\"view-message-card__author\">\r\n          {messageObject.email}\r\n        </h3>\r\n      </div>\r\n      <h2 className=\"view-message-card__title\">\r\n        {messageObject.title}\r\n      </h2>\r\n      <p className=\"view-message-card__text\">\r\n        {messageObject.message}\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ViewMessageModal;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport IStore from \"../../redux/interfaceStore\";\r\nimport AddUpdateMessageModal from \"../AddUpdateMessageModal\";\r\nimport ViewMessageModal from \"../ViewMessageModal\";\r\nimport { closeModal, setCurrentHour } from \"../../redux/actions\";\r\n\r\nimport { MODAL_TYPES } from '../../data';\r\n\r\nfunction Modal():JSX.Element {\r\n  const { modalType } = useSelector((store: IStore) => store.modal);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleCloseButtonClick = () => {\r\n    dispatch(setCurrentHour(null));\r\n    \r\n    dispatch(closeModal());\r\n  };\r\n\r\n  return (\r\n    <div className=\"modal modal_visibility\">\r\n      <div className=\"modal__wrapper\">\r\n        <span\r\n          className=\"modal__close-button\"\r\n          onClick={handleCloseButtonClick}\r\n        ></span>\r\n        {MODAL_TYPES.ADD === modalType && <AddUpdateMessageModal />}\r\n        {MODAL_TYPES.UPDATE === modalType && <AddUpdateMessageModal />}\r\n        {MODAL_TYPES.VIEW === modalType && <ViewMessageModal />}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Modal;\r\n","import React from \"react\";\r\nimport {Redirect, Link} from 'react-router-dom';\r\nimport {useSelector} from 'react-redux';\r\n\r\nimport IStore from \"../../redux/interfaceStore\";\r\nimport { SignInForm, SignUpForm } from \"../../components\";\r\n\r\nconst Login = (): JSX.Element => {\r\n  const [isSignUpForm, toggleIsSignUpForm] = React.useState(false);\r\n  const [registerUserEmail, setRegisterUserEmail] = React.useState('');\r\n  const isAuthenticated = useSelector((state: IStore) => state.auth.isAuthenticated);\r\n\r\n  const handleToggleButtonClick = () => {\r\n    toggleIsSignUpForm(!isSignUpForm);\r\n  };\r\n\r\n  return isAuthenticated ? (\r\n    <Redirect exact to='/calendar' />\r\n  ) : (\r\n    <div className=\"login\">\r\n      <div className='wrapper'>\r\n      <div className=\"login__wrapper\">\r\n      <Link to ='/' className=\"button login__button button__add\">landing page</Link>\r\n        {isSignUpForm ? (\r\n          <SignUpForm handleToggleButtonClick={handleToggleButtonClick} setRegisterUserEmail={setRegisterUserEmail}/>\r\n        ) : (\r\n          <SignInForm handleToggleButtonClick={handleToggleButtonClick} registerUserEmail={registerUserEmail}/>\r\n        )}\r\n      </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n\r\n","import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { setAuthUser } from \"../../redux/actions\";\r\nimport setAuthToken from \"../../services/setAuthToken\";\r\n\r\nconst Logout = (): JSX.Element => {\r\n  const dispatch = useDispatch();\r\n\r\n  React.useEffect(() => {\r\n    localStorage.removeItem(\"accessToken\");\r\n    setAuthToken(false);\r\n    dispatch(setAuthUser({}));\r\n  }, [dispatch]);\r\n\r\n  return <Redirect exact to=\"/\" />;\r\n};\r\n\r\nexport default Logout;\r\n","import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { useRouteMatch } from \"react-router-dom\";\r\n\r\nconst NotFound = (): JSX.Element => {\r\n  const [redirect, setRedirect] = React.useState(false);\r\n  const match = useRouteMatch();\r\n\r\n  const handleRedirectButtonClick = () => {\r\n    setRedirect(true);\r\n  };\r\n\r\n  return redirect ? (\r\n    <Redirect exact to={match.url} />\r\n  ) : (\r\n    <div className=\"not-found\">\r\n      <div className=\"wrapper\">\r\n        <div className=\"not-found__wrapper\">\r\n          <h2 className=\"not-found__title\">NotFound</h2>\r\n          <button\r\n            className=\"button button__add\"\r\n            onClick={handleRedirectButtonClick}\r\n          >\r\n            to home\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport IStore from \"../../redux/interfaceStore\";\r\nimport { MainWrapper, Calendar, Header, SideBar, Modal } from \"../../components\";\r\n\r\nconst Main = ():JSX.Element => {\r\n  const { isAuthenticated } = useSelector((state: IStore) => state.auth);\r\n  const { isOpenModal } = useSelector((state: IStore) => state.modal);\r\n  const [isOpenSideBar, setIsOpenSideBar] = React.useState(true);\r\n\r\n  return !isAuthenticated ? (\r\n    <Redirect to=\"/login\" />\r\n  ) : (\r\n    <MainWrapper>\r\n      <Header\r\n        isOpenSideBar={isOpenSideBar}\r\n        setIsOpenSideBar={setIsOpenSideBar}\r\n      />\r\n      <div className=\"main\">\r\n        <div className=\"wrapper\">\r\n          <div className=\"main__wrapper\">\r\n            <SideBar isOpenSideBar={isOpenSideBar} />\r\n            <Calendar />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {isOpenModal && <Modal />}\r\n    </MainWrapper>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from \"react\";\r\n\r\nconst Loading = (): JSX.Element => {\r\n  return (\r\n    <div className=\"loading\">\r\n      <h2 className=\"loading__title\">Loading</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\n\r\nimport { Landing, Login, Logout, NotFound, Main } from \"./pages\";\r\nimport setAuthToken from \"./services/setAuthToken\";\r\nimport { setAuthUser } from \"./redux/actions\";\r\nimport { DecodedTokenType } from \"./types/decodedTokenTypes\";\r\nimport { ModelUserType } from './services/getModelUser'; \r\n\r\nimport { BACKEND_URL } from './data';\r\n\r\nimport \"./scss/style.scss\";\r\n\r\nconst App = (): JSX.Element => {\r\n  const dispatch = useDispatch();\r\n  \r\n  React.useEffect(() => {\r\n    //  возможно нужно всю логику перенести в actions redux, services или создать свой хук???\r\n    if (localStorage.accessToken) {\r\n      const decodedToken: DecodedTokenType = jwt_decode(localStorage.accessToken);\r\n      const idUser = decodedToken.sub;\r\n      const currentTime = Date.now() / 1000;\r\n      if (decodedToken.exp < currentTime) {\r\n        localStorage.removeItem(\"accessToken\");\r\n        setAuthToken(false);\r\n        dispatch(setAuthUser({}));\r\n      } else {\r\n        setAuthToken(localStorage.accessToken);\r\n        axios\r\n          .get(`${BACKEND_URL}/data-users/${idUser}`)\r\n          .then((res: { data: ModelUserType }) => {\r\n            dispatch(setAuthUser(res.data))\r\n          })\r\n          .catch(() => {\r\n            console.log(\r\n              \"В данный момент имеются проблемы с сервером, попробуйте зайти позже...\"\r\n            );\r\n          });\r\n      }\r\n    }\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <BrowserRouter>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Landing} />\r\n          <Route path=\"/calendar\" component={Main} />\r\n          <Route exact path=\"/login\" component={Login} />\r\n          <Route exact path=\"/logout\" component={Logout} />\r\n          <Route component={NotFound} />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport store from \"./redux\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}