{"version":3,"sources":["services/isEmpty.ts","redux/auth/authConstants.ts","redux/auth/authReducer.ts","data/modalTypes.ts","data/userRoles.ts","data/regExp.ts","data/urls.ts","data/calendar.ts","services/monthData.ts","redux/calendar/calendarConstants.ts","redux/calendar/calendarReducer.ts","redux/messages/messagesConstants.ts","redux/messages/messagesReducer.ts","redux/users/usersConstants.ts","redux/users/usersReducer.ts","redux/modal/modalConstants.ts","redux/modal/modalReducer.ts","redux/reducers.ts","redux/index.ts","pages/Landing/index.tsx","redux/auth/authActions.ts","redux/modal/modalActions.ts","redux/messages/messagesActions.ts","redux/calendar/calendarActions.ts","components/MainWrapper/index.tsx","services/validationSignIn.ts","services/setAuthToken.ts","components/SignInForm/index.tsx","services/getModelUser.ts","services/validationSignUp.ts","components/SignUpForm/index.tsx","services/getTimeInFormat.ts","components/Calendar/CardMessage/index.tsx","services/getDateInFormat.ts","components/Calendar/CardEmpty/index.tsx","components/Calendar/Day/index.tsx","components/Calendar/Segment/SegmentGroup/index.tsx","services/verificationFilterInput.ts","services/validationFilterForm.ts","components/Calendar/Segment/index.tsx","components/Calendar/Month/DayOfTheWeek/index.tsx","components/Calendar/Month/WeekOfTheMonth/index.tsx","components/Calendar/Month/index.tsx","components/Calendar/index.tsx","components/Calendar/WidgetMonth/WidgetDayOfTheWeek/index.tsx","components/Calendar/WidgetMonth/WidgetWeekOfTheMonth/index.tsx","components/Calendar/MonthToggle/index.tsx","components/Calendar/WidgetMonth/index.tsx","components/UsersList/UserItem/index.tsx","components/UsersList/index.tsx","components/SideBar/index.tsx","components/Header/index.tsx","components/AddUpdateMessageModal/index.tsx","components/ViewMessageModal/index.tsx","components/Modal/index.tsx","pages/Login/index.tsx","pages/Logout/index.tsx","pages/NotFound/index.tsx","pages/Main/index.tsx","pages/Loading/index.tsx","App.tsx","index.tsx"],"names":["isEmpty","value","undefined","Object","keys","length","trim","SET_AUTH_USER","SET_LOADED","initialState","isAuthenticated","isLoaded","user","MODAL_TYPES","USER_ROLES","REG_EXP_CHECK_DATE","BACKEND_URL","MONTH_NAMES","WEEK_DAY_NAMES","DAYS_IN_MONTH","monthData","year","month","data","date","Date","daysInMonth","getMonth","isLeapYear","getFullYear","getDaysInMonth","monthStartsOn","dayOfWeek","getDay","getDayOfWeek","day","i","j","isCurrentMonth","SET_ALL_START_DATES","UPDATE_DATA_MONTH","SET_CURRENT_HOUR","UPDATE_SELECTED_DATE","basicDate","currentDate","currentHour","selectedWeek","selectedDate","idSelectedDate","SET_ALL_MESSAGES","isNoMessages","isLoadedMessages","messages","SET_ALL_USERS","users","OPEN_MODAL","CLOSE_MODAL","isOpenModal","modalType","rootReducers","combineReducers","calendar","state","action","type","constants","payload","getTime","modal","auth","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","Landing","className","to","setAuthUser","setLoaded","boolean","openModal","closeModal","requestAllMessages","dispatch","axios","get","then","res","setAllMessages","setCurrentHour","updateSelectedDate","updateDataMonth","MainWrapper","children","useSelector","useDispatch","React","useEffect","getDate","setAllStartDates","setTimeout","Fragment","validationSignIn","errors","Validator","isEmail","email","isLength","password","min","max","isValid","setAuthToken","token","defaults","headers","common","SignInForm","handleToggleButtonClick","registerUserEmail","useState","stateForm","setStateForm","errorsForm","setErrorsForm","handleInputChange","event","target","name","request","onSubmit","preventDefault","post","accessToken","localStorage","setItem","idUser","jwt_decode","sub","catch","err","response","placeholder","onChange","onClick","getModelUser","stateSignUpForm","userId","id","role","validationSignUp","password_confirmed","equals","SignUpForm","setRegisterUserEmail","modelUser","getTimeInFormat","hour","CardMessage","groupId","message","roleCurrentUser","handleOpenModalClick","currentId","messagesTargetDay","find","el","filter","put","delete","getDateInFormat","dateInMilliseconds","CardEmpty","Day","messagesDay","map","index","Array","fill","SegmentGroup","group","verificationFilterInput","currentValueInput","validationFilterForm","startParam","match","endParam","Segment","messagesLocalStorage","setMessagesLocalStorage","errorsFilter","setErrorsFilter","paramsFilter","setParamFilter","arrayStartParam","split","arrayEndParam","indexStartParam","indexEndParam","warning","filteredData","withRouter","history","dayData","path","useRouteMatch","setLocalStorage","firstThreeMessagesDay","slice","push","weekData","weekNumber","Month","week","Calendar","exact","component","isCurrentDate","isSelectedDate","MonthToggle","WidgetMonth","UserItem","setAllUsers","isVisibleButttons","setIsVisibleButttons","handleUpdateRoleClick","updateDataUser","console","log","UsersList","setIsLoaded","listUsers","setListUsers","useCallback","SideBar","isOpenSideBar","Header","setIsOpenSideBar","AddUpdateMessageModal","title","stateMessageModal","setStateMessageModal","targetMessage","handleAddUpdateButtonClick","array","ViewMessageModal","Modal","Login","isSignUpForm","toggleIsSignUpForm","Logout","removeItem","NotFound","redirect","setRedirect","url","Main","Loading","App","decodedToken","currentTime","now","exp","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6a58a114.chunk.js","sourcesContent":["function isEmpty(value: any): boolean {\r\n  return (\r\n    value === undefined ||\r\n    value === null ||\r\n    (typeof value === \"object\" && Object.keys(value).length === 0) ||\r\n    (typeof value === \"string\" && value.trim().length === 0)\r\n  );\r\n}\r\nexport default isEmpty;\r\n","export const SET_AUTH_USER = \"SET_AUTH_USER\";\r\nexport const SET_LOADED = \"SET_LOADED\";\r\n","import isEmpty from \"../../services/isEmpty\";\r\n\r\nimport { ModelUserType } from '../../services/getModelUser';\r\n\r\nimport * as constants from \"./authConstants\";\r\nimport * as actions from \"./authActions\";\r\n\r\ntype InferValueTypes<T> = T extends { [key: string]: infer U } ? U : never;\r\ntype ActionTypes = ReturnType<InferValueTypes<typeof actions>>;\r\n\r\nexport type InitialStateType = {\r\n  isAuthenticated: boolean\r\n  isLoaded: boolean\r\n  user: ModelUserType \r\n};\r\n\r\nconst initialState = {\r\n  isAuthenticated: false,\r\n  isLoaded: false,\r\n  user: {},\r\n};\r\n\r\nexport default function auth(state = initialState, action: ActionTypes):InitialStateType {\r\n  switch (action.type) {\r\n    case constants.SET_AUTH_USER:\r\n      return {\r\n        ...state,\r\n        isAuthenticated: !isEmpty(action.payload),\r\n        user: action.payload,\r\n      };\r\n    case constants.SET_LOADED:\r\n      return {\r\n        ...state,\r\n        isLoaded: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","export const MODAL_TYPES = {\r\n  ADD: \"ADD\",\r\n  UPDATE: \"UPDATE\",\r\n  VIEW: \"VIEW\",\r\n};","export const USER_ROLES = {\r\n  ADMIN: \"admin\",\r\n  USER: \"user\",\r\n  VIEWER: \"viewer\",\r\n};","export const REG_EXP_CHECK_DATE =\r\n  \"^(?=\\\\d{2}([\\\\/])\\\\d{2}\\\\1\\\\d{4}$)(?:0[1-9]|1\\\\d|[2][0-8]|29(?!.02.(?!(?!(?:[02468][1-35-79]|[13579][0-13-57-9])00)\\\\d{2}(?:[02468][048]|[13579][26])))|30(?!.02)|31(?=.(?:0[13578]|10|12))).(?:0[1-9]|1[012]).\\\\d{4}$\";","export const BACKEND_URL = \"https://my-cool-project-123.herokuapp.com\";","export const MONTH_NAMES = [\r\n  \"January\",\r\n  \"February\",\r\n  \"March\",\r\n  \"April\",\r\n  \"May\",\r\n  \"June\",\r\n  \"July\",\r\n  \"August\",\r\n  \"September\",\r\n  \"October\",\r\n  \"November\",\r\n  \"December\",\r\n];\r\nexport const WEEK_DAY_NAMES = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\r\n\r\nexport const DAYS_WEEK = 7;\r\nexport const HOURS_DAY = 24;\r\n\r\nexport const DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\r\n","import { DAYS_IN_MONTH, DAYS_WEEK } from '../data';\r\n\r\n// Проверка, является ли год высокосным\r\nfunction isLeapYear(year: number): boolean {\r\n  return !(year % 4 || (!(year % 100) && year % 400));\r\n}\r\n\r\n// Рассчет количества дней в текущем месяце\r\nfunction getDaysInMonth(date: Date): number {\r\n  const month = date.getMonth();\r\n  const year = date.getFullYear();\r\n  if (isLeapYear(year) && month === 1) {\r\n    return DAYS_IN_MONTH[month] + 1;\r\n  } else {\r\n    return DAYS_IN_MONTH[month];\r\n  }\r\n}\r\n\r\n// Рассчет дня недели (в USA воскресенье считается 0 днем)\r\nfunction getDayOfWeek(date: Date): number {\r\n  const dayOfWeek = date.getDay();\r\n  if (dayOfWeek === 0) return 6;\r\n  return dayOfWeek - 1;\r\n}\r\n\r\ntype DataItemType = {\r\n  date: Date;\r\n  isCurrentMonth: boolean;\r\n}\r\n\r\n//  Рассчет сетки текущего(выбранного) месяца\r\nfunction monthData(year: number, month: number): Array<DataItemType[]> {\r\n  const data: Array<DataItemType[]> = [];\r\n  const date = new Date(year, month);\r\n  const daysInMonth = getDaysInMonth(date);\r\n  const monthStartsOn = getDayOfWeek(date);\r\n  let day = 1;\r\n\r\n  for (let i = 0; i < (daysInMonth + monthStartsOn) / DAYS_WEEK; i++) {\r\n    data[i] = [];\r\n    for (let j = 0; j < DAYS_WEEK; j++) {\r\n      if (i === 0 && j < monthStartsOn) {\r\n        data[i][j] = {\r\n          date: new Date(year, month, day - (monthStartsOn - j)),\r\n          isCurrentMonth: false,\r\n        };\r\n      } else if (day > daysInMonth) {\r\n        data[i][j] = {\r\n          date: new Date(year, month, day++),\r\n          isCurrentMonth: false,\r\n        };\r\n      } else {\r\n        data[i][j] = {\r\n          date: new Date(year, month, day++),\r\n          isCurrentMonth: true,\r\n        };\r\n      }\r\n    }\r\n  }\r\n  return data;\r\n}\r\n\r\nexport default monthData;\r\n","export const SET_ALL_START_DATES = 'SET_ALL_START_DATES';\r\nexport const UPDATE_DATA_MONTH = 'UPDATE_DATA_MONTH';\r\nexport const SET_CURRENT_HOUR ='SET_CURRENT_HOUR';\r\nexport const UPDATE_SELECTED_DATE = 'UPDATE_SELECTED_DATE';\r\nexport const CLEAR_DATES ='CLEAR_DATES';\r\n","import monthData from \"../../services/monthData\";\r\n\r\nimport * as constants from \"./calendarConstants\";\r\nimport * as actions from \"./calendarActions\";\r\n\r\nexport type DayDataType = {\r\n  date: Date;\r\n  isCurrentMonth: boolean;\r\n};\r\n\r\ntype InferValueTypes<T> = T extends { [key: string]: infer U } ? U : never;\r\ntype ActionTypes = ReturnType<InferValueTypes<typeof actions>>;\r\n\r\nexport type InitialStateType = {\r\n  data: DayDataType[][] | null;\r\n  currentDate: Date | null;\r\n  currentHour: number | null;\r\n  basicDate: Date | null;\r\n  selectedDate: Date | null;\r\n  selectedWeek: number | null;\r\n  idSelectedDate: number | null;\r\n};\r\n\r\nconst initialState: InitialStateType = {\r\n  data: null,\r\n  basicDate: null,\r\n  currentDate: null,\r\n  currentHour: null,\r\n  selectedWeek: null,\r\n  selectedDate: null,\r\n  idSelectedDate: null,\r\n};\r\n\r\nexport default function calendar( state = initialState, action: ActionTypes): InitialStateType {\r\n  switch (action.type) {\r\n    case constants.SET_ALL_START_DATES:\r\n      return {\r\n        ...state,\r\n        data: monthData(\r\n          action.payload.getFullYear(),\r\n          action.payload.getMonth()\r\n        ),\r\n        currentDate: action.payload,\r\n        basicDate: action.payload,\r\n      };\r\n    case constants.UPDATE_DATA_MONTH:\r\n      return {\r\n        ...state,\r\n        data: monthData(\r\n          action.payload.getFullYear(),\r\n          action.payload.getMonth()\r\n        ),\r\n        basicDate: action.payload,\r\n      };\r\n    case constants.SET_CURRENT_HOUR:\r\n      return {\r\n        ...state,\r\n        currentHour: action.payload,\r\n      };\r\n    case constants.UPDATE_SELECTED_DATE:\r\n      return {\r\n        ...state,\r\n        selectedDate: action.payload,\r\n        idSelectedDate: action.payload.getTime(),\r\n      };\r\n    // case constants.CLEAR_DATES:\r\n    //   return initialState;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","export const SET_ALL_MESSAGES = \"SET_ALL_MESSAGES\";\r\n","import isEmpty from '../../services/isEmpty';\r\n\r\nimport { SetAllMessagesActionType } from './messagesActions';\r\nimport { MessagesSpecificDateType } from '../../types/messagesDataTypes';\r\n\r\nimport * as constants from './messagesConstants';\r\n\r\nexport type InitialStateType = {\r\n  isNoMessages: boolean\r\n  isLoadedMessages: boolean\r\n  messages: MessagesSpecificDateType[]\r\n};\r\nconst initialState = {\r\n  isNoMessages: false,\r\n  isLoadedMessages: false,\r\n  messages: [],\r\n};\r\n\r\nexport default function messages(state = initialState, action: SetAllMessagesActionType): InitialStateType {\r\n  switch (action.type) {\r\n    case constants.SET_ALL_MESSAGES:\r\n      return {\r\n        ...state,\r\n        isNoMessages: isEmpty(action.payload),\r\n        isLoadedMessages: true,\r\n        messages: action.payload\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","export const SET_ALL_USERS = 'SET_ALL_USERS';","import { ModelUserType } from \"../../services/getModelUser\";\r\n\r\nimport * as constants from \"./usersConstants\";\r\nimport * as actions from './usersActions';\r\n\r\ntype InferValueTypes<T> = T extends { [key: string]: infer U } ? U : never;\r\ntype ActionTypes = ReturnType<InferValueTypes<typeof actions>>;\r\n\r\nexport type InitialSatateType = {\r\n  isLoaded: boolean\r\n  users: ModelUserType[],\r\n}\r\n\r\nconst initialState = {\r\n  isLoaded: false,\r\n  users: [],\r\n};\r\n\r\nexport default function users(state = initialState, action: ActionTypes):InitialSatateType {\r\n  switch (action.type) {\r\n    case constants.SET_ALL_USERS:\r\n      return {\r\n        ...state,\r\n        isLoaded: true,\r\n        users: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","export const OPEN_MODAL = \"OPEN_MODAL\";\r\nexport const CLOSE_MODAL = \"CLOSE_MODAL\";\r\n","import * as constants from \"./modalConstants\";\r\nimport * as actions from './modalActions';\r\n\r\ntype InferValueTypes<T> = T extends { [key: string]: infer U } ? U : never;\r\ntype ActionTypes = ReturnType<InferValueTypes<typeof actions>>;\r\n\r\nexport type InitialStateType = {\r\n  isOpenModal:boolean\r\n  modalType:string | null\r\n}\r\n\r\nconst initialState = {\r\n  isOpenModal: false,\r\n  modalType: null\r\n};\r\n\r\nexport default function modal(state = initialState, action: ActionTypes):InitialStateType {\r\n  switch (action.type) {\r\n    case constants.OPEN_MODAL:\r\n      return {\r\n        ...state,\r\n        isOpenModal: true,\r\n        modalType: action.payload\r\n      };\r\n    case constants.CLOSE_MODAL:\r\n      return initialState\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport auth from './auth/authReducer';\r\nimport calendar from './calendar/calendarReducer';\r\nimport messages from './messages/messagesReducer';\r\nimport users from './users/usersReducer';\r\nimport modal from './modal/modalReducer';\r\n\r\n\r\n\r\nconst rootReducers = combineReducers({\r\n  calendar,\r\n  modal,\r\n  auth,\r\n  messages,\r\n  users\r\n});\r\nexport type RootState = ReturnType<typeof rootReducers>;\r\n\r\nexport default rootReducers;\r\n","import { compose, createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport rootReducers from \"./reducers\";\r\n\r\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(\r\n  rootReducers,\r\n  composeEnhancers(applyMiddleware(thunk))\r\n);\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Landing = (): JSX.Element => {\r\n  return (\r\n    <div className=\"landing\">\r\n      <div className=\"wrapper\">\r\n        <div className=\"landing__wrapper\">\r\n          <div className=\"landing__group\">\r\n          <h1 className='landing__title'>Calendar</h1>\r\n            <Link to=\"/calendar\" className=\"button button__add\">\r\n              get started\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Landing;\r\n","import { ModelUserType } from '../../services/getModelUser';\r\n\r\nimport * as constants from \"./authConstants\";\r\n\r\ntype SetAuthUserActionType = {\r\n  type: typeof constants.SET_AUTH_USER;\r\n  payload: ModelUserType;\r\n};\r\nexport function setAuthUser(user: ModelUserType ): SetAuthUserActionType {\r\n  return {\r\n    type: constants.SET_AUTH_USER,\r\n    payload: user,\r\n  };\r\n}\r\n\r\ntype SetLoadedActionType = {\r\n  type: typeof constants.SET_LOADED;\r\n  payload: boolean;\r\n};\r\nexport function setLoaded(boolean: boolean): SetLoadedActionType {\r\n  return {\r\n    type: constants.SET_LOADED,\r\n    payload: boolean,\r\n  };\r\n}\r\n","import * as constants from \"./modalConstants\";\r\n\r\ntype OpenModalActionType = {\r\n  type: typeof constants.OPEN_MODAL\r\n  payload: string\r\n};\r\nexport const openModal = (modalType: string):OpenModalActionType => {\r\n  return {\r\n    type: constants.OPEN_MODAL,\r\n    payload: modalType\r\n  };\r\n};\r\n\r\ntype CloseModalActionType = {\r\n  type: typeof constants.CLOSE_MODAL\r\n};\r\nexport const closeModal = ():CloseModalActionType => {\r\n  return {\r\n    type: constants.CLOSE_MODAL,\r\n  };\r\n};\r\n","import axios from \"axios\";\r\nimport { Action } from \"redux\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\n\r\nimport { UserMessageDataType, MessagesSpecificDateType } from \"../../types/messagesDataTypes\";\r\nimport IStore from \"../interfaceStore\";\r\n\r\nimport * as constants from \"./messagesConstants\";\r\nimport { BACKEND_URL } from '../../data';\r\n\r\nexport type SetAllMessagesActionType = {\r\n  type: typeof constants.SET_ALL_MESSAGES;\r\n  payload: MessagesSpecificDateType[];\r\n};\r\nexport const setAllMessages = (messages: MessagesSpecificDateType[]): SetAllMessagesActionType => {\r\n  return {\r\n    type: constants.SET_ALL_MESSAGES,\r\n    payload: messages,\r\n  };\r\n};\r\n\r\nexport const requestAllMessages = (): ThunkAction<void, IStore, unknown, Action<string>> => (dispatch) => {\r\n  // axios.get(`${BACKEND_URL}/messages?_sort=id&_order=asc`) сортировка в обратном порядке\r\n  axios\r\n    .get(`${BACKEND_URL}/messages?_sort=id&_order=desc`)\r\n    .then((res) => {\r\n      const messages = res.data;\r\n      dispatch(setAllMessages(messages));\r\n    });\r\n};\r\n\r\nexport const addMessage = (userMessageData: UserMessageDataType, idSelectedDate: number): ThunkAction<void, IStore, unknown, Action<string>> => (dispatch) => {\r\n  axios\r\n    .get(`${BACKEND_URL}/messages/${idSelectedDate}`)\r\n    .then((res) => {\r\n      const data = res.data;\r\n      const index = data.find((message: UserMessageDataType) => message.currentHour === userMessageData.currentHour).id;\r\n      if (index) {\r\n        data.messages[index] = userMessageData;\r\n      } else {\r\n        data.messages.push(userMessageData);\r\n      }\r\n      axios.post(`${BACKEND_URL}/messages`, data);\r\n    })\r\n    .catch(() => {\r\n      const data = {\r\n        id: idSelectedDate,\r\n        messages: [userMessageData],\r\n      };\r\n      axios\r\n        .post(`${BACKEND_URL}/messages`, data)\r\n        .then((res) => console.log(res));\r\n    })\r\n    .then(() => {\r\n      dispatch(requestAllMessages());\r\n    });\r\n};\r\n","import * as constants from \"./calendarConstants\";\r\n\r\ntype SetAllStartDatesActionType = {\r\n  type: typeof constants.SET_ALL_START_DATES;\r\n  payload: Date;\r\n};\r\nexport function setAllStartDates(date: Date): SetAllStartDatesActionType {\r\n  return {\r\n    type: constants.SET_ALL_START_DATES,\r\n    payload: date,\r\n  };\r\n}\r\n\r\ntype SetCurrentHourActionType = {\r\n  type: typeof constants.SET_CURRENT_HOUR;\r\n  payload: number | null;\r\n};\r\nexport function setCurrentHour (currentHour: number | null):SetCurrentHourActionType{\r\n  return {\r\n    type: constants.SET_CURRENT_HOUR,\r\n    payload: currentHour,\r\n  };\r\n}\r\n\r\ntype UpdateSelectedDateActionType = {\r\n  type: typeof constants.UPDATE_SELECTED_DATE;\r\n  payload: Date;\r\n};\r\nexport function updateSelectedDate(date: Date): UpdateSelectedDateActionType {\r\n  return {\r\n    type: constants.UPDATE_SELECTED_DATE,\r\n    payload: date,\r\n  };\r\n}\r\n\r\ntype UpdateDataMonthActionType = {\r\n  type: typeof constants.UPDATE_DATA_MONTH;\r\n  payload: Date;\r\n};\r\nexport function updateDataMonth(date:Date):UpdateDataMonthActionType{\r\n  return{\r\n    type: constants.UPDATE_DATA_MONTH,\r\n    payload: date\r\n  }\r\n}","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport IStore from \"../../redux/interfaceStore\";\r\nimport { Loading } from \"../../pages\";\r\nimport { setAllStartDates, setLoaded, requestAllMessages } from \"../../redux/actions\";\r\n\r\nconst MainWrapper = ({ children }: { children:any }): JSX.Element => {\r\n  const { isLoaded } = useSelector((store: IStore) => store.auth);\r\n  const dispatch = useDispatch();\r\n\r\n  React.useEffect(():()=> void => {\r\n    const date = new Date();\r\n    const currentDate = new Date(date.getFullYear(), date.getMonth(), date.getDate());\r\n    dispatch(setAllStartDates(currentDate));\r\n    dispatch(requestAllMessages());\r\n    // временная фейк-запрос\r\n    setTimeout(() => dispatch(setLoaded(true)), 1000);\r\n    return () => dispatch(setLoaded(false));\r\n  }, [dispatch]);\r\n\r\n  return <React.Fragment>{isLoaded ? children : <Loading />}</React.Fragment>;\r\n};\r\n\r\nexport default MainWrapper;\r\n","import Validator from \"validator\";\r\nimport isEmpty from \"./isEmpty\";\r\n\r\ntype ValidationSignInPropsType = {\r\n  email: string;\r\n  password: string;\r\n}\r\ntype ValidationSignInErrorsType = {\r\n  email?: string;\r\n  password?: string;\r\n}\r\ntype ReturnValidationSignInType = {\r\n  errors: ValidationSignInErrorsType;\r\n  isValid: boolean;\r\n}\r\nfunction validationSignIn(data: ValidationSignInPropsType): ReturnValidationSignInType {\r\n  const errors: ValidationSignInErrorsType = {};\r\n\r\n  if (!Validator.isEmail(data.email)) {\r\n    errors.email = \"Email entered incorrectly\";\r\n  }\r\n\r\n  if (Validator.isEmpty(data.email)) {\r\n    errors.email = \"Enter your email\";\r\n  }\r\n\r\n  if (!Validator.isLength(data.password, { min: 6, max: 30 })) {\r\n    errors.password = \"The password must be at least 6 characters long\";\r\n  }\r\n\r\n  if (Validator.isEmpty(data.password)) {\r\n    errors.password = \"Enter password\";\r\n  }\r\n\r\n  return {\r\n    errors,\r\n    isValid: isEmpty(errors),\r\n  };\r\n}\r\n\r\nexport default validationSignIn;\r\n","import axios from \"axios\";\r\n\r\nfunction setAuthToken(token: string | false): void {\r\n  if (token) {\r\n    axios.defaults.headers.common[\"Authorization\"] = token;\r\n  } else {\r\n    axios.defaults.headers.common[\"Authorization\"] = null;\r\n  }\r\n}\r\nexport default setAuthToken;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport validationSignIn from \"../../services/validationSignIn\";\r\nimport setAuthToken from \"../../services/setAuthToken\";\r\nimport { setAuthUser } from \"../../redux/actions\";\r\nimport { StateSignInFormType, SignInFormPropsType, ErrorsSignInFormType } from \"../../types/signInFormTypes\";\r\nimport { DecodedTokenType } from \"../../types/decodedTokenTypes\";\r\nimport { ModelUserType } from '../../services/getModelUser'; \r\n\r\nimport { BACKEND_URL } from '../../data';\r\n\r\nconst SignInForm = ({ handleToggleButtonClick, registerUserEmail }: SignInFormPropsType): JSX.Element => {\r\n  const dispatch = useDispatch();\r\n  //возможно стоит перенести ошибки в redux хранилище\r\n  const [stateForm, setStateForm] = React.useState<StateSignInFormType>({\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n  const [errorsForm, setErrorsForm] = React.useState<ErrorsSignInFormType>({});\r\n\r\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setStateForm({\r\n      ...stateForm,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n    setErrorsForm({\r\n      ...errorsForm,\r\n      request: \"\",\r\n      [event.target.name]: \"\",\r\n    });\r\n  };\r\n\r\n  React.useEffect(()=>{\r\n    if(registerUserEmail) setStateForm({...stateForm, email: registerUserEmail});\r\n    //  не могу понять, в чем тут ошибка \r\n  },[registerUserEmail])\r\n\r\n  const handleSubmitForm = (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n    const { isValid, errors } = validationSignIn(stateForm);\r\n    if (isValid) {\r\n      // Возможно стоит перенести в action\r\n      axios\r\n        .post(`${BACKEND_URL}/signin`, stateForm)\r\n        .then((res: { data: { accessToken: string } }) => {\r\n          const { accessToken } = res.data;\r\n          localStorage.setItem(\"accessToken\", accessToken);\r\n          setAuthToken(accessToken);\r\n          const decodedToken: DecodedTokenType = jwt_decode(accessToken);\r\n          const idUser = decodedToken.sub;\r\n          axios\r\n            .get(`${BACKEND_URL}/data-users/${idUser}`)\r\n            .then((res: { data: ModelUserType }) => dispatch(setAuthUser(res.data)))\r\n            // .catch((err: { response: { data: string } }) => setErrorsForm({ request: err.response.data }))\r\n        })\r\n        .catch((err: { response: { data: string } }) => {\r\n          setErrorsForm({ request: err.response.data })\r\n        })\r\n    } else {\r\n      setErrorsForm(errors);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form className=\"sign-in-form\" onSubmit={handleSubmitForm}>\r\n      <h2 className=\"sign-in-form__title\">Sign In</h2>\r\n      \r\n      <div className=\"sign-in-form__error-request-feedback\">{errorsForm.request}</div>\r\n      \r\n      <div className=\"sign-in-form__group\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Email\"\r\n          className=\"input sign-in-form__input\"\r\n          name=\"email\"\r\n          value={stateForm.email}\r\n          onChange={handleInputChange}\r\n        />\r\n\r\n        <div className=\"sign-in-form__error-feedback\">{errorsForm.email}</div>\r\n        \r\n      </div>\r\n\r\n      <div className=\"sign-in-form__group\">\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          className=\"input sign-in-form__input\"\r\n          name=\"password\"\r\n          value={stateForm.password}\r\n          onChange={handleInputChange}\r\n        />\r\n\r\n        <div className=\"sign-in-form__error-feedback\">{errorsForm.password}</div>\r\n\r\n      </div>\r\n\r\n      <div className=\"sign-in-form__group-buttons\">\r\n        <button type='submit' className=\"button button__prim\">\r\n        Sign In\r\n        </button>\r\n        <p className=\"sign-in-form__group-buttons-text\">You are new? <span onClick={handleToggleButtonClick}>Create new</span></p>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default SignInForm;\r\n","import { StateSignUpFormType } from \"../types/signUpFormTypes\";\r\nimport { USER_ROLES } from \"../data\";\r\n\r\nexport type ModelUserType = {\r\n  id?: number;\r\n  name?: string;\r\n  email?: string;\r\n  role?: string;\r\n}\r\n\r\nfunction getModelUser(stateSignUpForm: StateSignUpFormType, userId: number): ModelUserType {\r\n  const { name, email } = stateSignUpForm;\r\n  const modelUser = {\r\n    id: userId,\r\n    name,\r\n    email,\r\n    role: USER_ROLES.USER,\r\n  };\r\n  return modelUser;\r\n}\r\n\r\nexport default getModelUser;\r\n","import Validator from \"validator\";\r\nimport isEmpty from \"./isEmpty\";\r\n\r\ntype ValidationSignUpPropsType = {\r\n  name: string;\r\n  email: string;\r\n  password: string;\r\n  password_confirmed: string;\r\n}\r\ntype ValidationSignUpErrorsType = {\r\n  name?: string;\r\n  email?: string;\r\n  password?: string;\r\n  password_confirmed?: string;\r\n}\r\ntype ReturnValidationSignUpType = {\r\n  errors: ValidationSignUpErrorsType;\r\n  isValid: boolean;\r\n}\r\n\r\nfunction validationSignUp(data: ValidationSignUpPropsType): ReturnValidationSignUpType {\r\n  const errors: ValidationSignUpErrorsType = {};\r\n\r\n  if (!Validator.isLength(data.name, { min: 2, max: 30 })) {\r\n    errors.name = \"Name must be between 2 and 30 characters\";\r\n  }\r\n\r\n  if (Validator.isEmpty(data.name)) {\r\n    errors.name = \"Enter your name\";\r\n  }\r\n\r\n  if (!Validator.isEmail(data.email)) {\r\n    errors.email = \"Email entered incorrectly\";\r\n  }\r\n\r\n  if (Validator.isEmpty(data.email)) {\r\n    errors.email = \"Enter your email\";\r\n  }\r\n\r\n  if (!Validator.isLength(data.password, { min: 6, max: 30 })) {\r\n    errors.password = \"The password must be at least 6 characters long\";\r\n  }\r\n\r\n  if (Validator.isEmpty(data.password)) {\r\n    errors.password = \"Enter password\";\r\n  }\r\n\r\n  if (!Validator.isLength(data.password_confirmed, { min: 6, max: 30 })) {\r\n    errors.password_confirmed =\r\n      \"The password must be at least 6 characters long\";\r\n  }\r\n\r\n  if (!Validator.equals(data.password, data.password_confirmed)) {\r\n    errors.password_confirmed = \"Password and confirm password must match\";\r\n  }\r\n\r\n  if (Validator.isEmpty(data.password_confirmed)) {\r\n    errors.password_confirmed = \"Enter password\";\r\n  }\r\n\r\n  return {\r\n    errors,\r\n    isValid: isEmpty(errors),\r\n  };\r\n}\r\n\r\nexport default validationSignUp;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\nimport getModelUser from \"../../services/getModelUser\";\r\nimport validationSignUp from \"../../services/validationSignUp\";\r\nimport { DecodedTokenType } from \"../../types/decodedTokenTypes\";\r\nimport { SignUpFormPropsType, StateSignUpFormType, ErrorsSignUpFormType } from \"../../types/signUpFormTypes\";\r\n\r\nimport { BACKEND_URL } from '../../data';\r\n\r\nconst SignUpForm = ({ handleToggleButtonClick, setRegisterUserEmail }: SignUpFormPropsType):JSX.Element => {\r\n  const [stateForm, setStateForm] = React.useState<StateSignUpFormType>({\r\n    name: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    password_confirmed: \"\",\r\n  });\r\n\r\n  const [errorsForm, setErrorsForm] = React.useState<ErrorsSignUpFormType>({});\r\n\r\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setStateForm({\r\n      ...stateForm,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n    setErrorsForm({\r\n      ...errorsForm,\r\n      request: \"\",\r\n      [event.target.name]: \"\",\r\n    });\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    setRegisterUserEmail(\"\");\r\n  },[setRegisterUserEmail]);\r\n\r\n  const handleSubmitForm = (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n    const { isValid, errors } = validationSignUp(stateForm);\r\n    if (isValid) {\r\n      // очень много логики, возможно нужно перенести в action или в services\r\n      const user = {\r\n        email: stateForm.email,\r\n        password: stateForm.password,\r\n      };\r\n      axios\r\n        .post(`${BACKEND_URL}/signup`, user)\r\n        .then((res: { data: { accessToken: string } }) => {\r\n          const { accessToken } = res.data;\r\n          const decodedToken: DecodedTokenType = jwt_decode(accessToken);\r\n          const userId = +decodedToken.sub;\r\n          const modelUser = getModelUser(stateForm, userId);\r\n          axios\r\n            .post(`${BACKEND_URL}/data-users`, modelUser)\r\n            .catch((err: { response: { data: string } }) => setErrorsForm({ request: err.response.data }));\r\n        })\r\n        .then(() => {\r\n          handleToggleButtonClick();\r\n          setRegisterUserEmail(user.email);\r\n        })\r\n        .catch((err: { response: { data: string } }) => setErrorsForm({ request: err.response.data }));\r\n    } else {\r\n      setErrorsForm(errors);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form className=\"sign-up-form\" onSubmit={handleSubmitForm}>\r\n      <h2 className=\"sign-up-form__title\">Sign Up</h2>\r\n    \r\n      <div className=\"sign-up-form__error-request-feedback\">{errorsForm.request}</div>\r\n    \r\n      <div className=\"sign-up-form__group\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Name\"\r\n          className=\"input sign-up-form__input\"\r\n          name=\"name\"\r\n          value={stateForm.name}\r\n          onChange={handleInputChange}\r\n        />\r\n      \r\n        <div className=\"sign-up-form__error-feedback\">{errorsForm.name}</div>\r\n        \r\n      </div>\r\n\r\n      <div className=\"sign-up-form__group\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Email\"\r\n          className=\"input sign-up-form__input\"\r\n          name=\"email\"\r\n          value={stateForm.email}\r\n          onChange={handleInputChange}\r\n        />\r\n        \r\n        <div className=\"sign-up-form__error-feedback\">{errorsForm.email}</div>\r\n        \r\n      </div>\r\n\r\n      <div className=\"sign-up-form__group\">\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          className=\"input sign-up-form__input\"\r\n          name=\"password\"\r\n          value={stateForm.password}\r\n          onChange={handleInputChange}\r\n        />\r\n        \r\n        <div className=\"sign-up-form__error-feedback\">{errorsForm.password}</div>\r\n        \r\n      </div>\r\n\r\n      <div className=\"sign-up-form__group\">\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"Password confirmed\"\r\n          className=\"input sign-up-form__input\"\r\n          name=\"password_confirmed\"\r\n          value={stateForm.password_confirmed}\r\n          onChange={handleInputChange}\r\n        />\r\n        \r\n        <div className=\"sign-up-form__error-feedback\">{errorsForm.password_confirmed}</div>\r\n        \r\n      </div>\r\n\r\n      <div className=\"sign-up-form__group-buttons\">\r\n        <button\r\n          type=\"submit\"\r\n          className=\"button button__prim\"\r\n        >\r\n          Sign Up\r\n        </button>\r\n        <p className=\"sign-up-form__group-buttons-text\">\r\n                Already have account? <span onClick={handleToggleButtonClick}>Login</span>\r\n        </p>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default SignUpForm;","// Преобразование числового значения часа в формат чч:мм\r\nfunction getTimeInFormat(hour: number): string {\r\n  return hour >= 10 ? `${hour}:00` : `0${hour}:00`;\r\n}\r\n\r\nexport default getTimeInFormat;","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport axios from \"axios\";\r\n\r\nimport IStore from \"../../../redux/interfaceStore\";\r\nimport isEmpty from \"../../../services/isEmpty\";\r\nimport { openModal, setCurrentHour, updateSelectedDate } from \"../../../redux/actions\";\r\nimport getTimeInFormat from \"../../../services/getTimeInFormat\";\r\nimport { requestAllMessages } from \"../../../redux/messages/messagesActions\";\r\nimport { CardMessagePropsType } from '../../../types/cardMessageTypes';\r\n\r\nimport { BACKEND_URL, MODAL_TYPES, USER_ROLES } from '../../../data';\r\n\r\nconst CardMessage = ({ groupId, message: { message, email, currentHour, role, userId }}: CardMessagePropsType): JSX.Element => {\r\n  const { id } = useSelector((store: IStore) => store.auth.user);\r\n  const roleCurrentUser = useSelector((store: IStore) => store.auth.user.role);\r\n  const { messages } = useSelector((store: IStore) => store.messages);\r\n  const { idSelectedDate } = useSelector((store: IStore) => store.calendar);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleOpenModalClick = (modalType: string) => {\r\n    if (groupId) {\r\n      const date = new Date(groupId);\r\n      dispatch(updateSelectedDate(date));\r\n    }\r\n    dispatch(setCurrentHour(currentHour));\r\n    dispatch(openModal(modalType));\r\n  };\r\n\r\n  const handleRemoveButtonClick = () => {\r\n    const currentId = groupId || idSelectedDate;\r\n    const messagesTargetDay = messages.find((el: any) => el.id === currentId);\r\n    messagesTargetDay!.messages[currentHour] = null;\r\n    const isMessages = !isEmpty(messagesTargetDay!.messages.filter((el: any) => el));\r\n    if (isMessages) {\r\n      axios\r\n        .put(`${BACKEND_URL}/messages/${currentId}`, messagesTargetDay)\r\n        .then(() => {\r\n          dispatch(requestAllMessages());\r\n        });\r\n    } else {\r\n      axios\r\n        .delete(`${BACKEND_URL}/messages/${currentId}`)\r\n        .then(() => {\r\n          dispatch(requestAllMessages());\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"card-message border_bottom\">\r\n      <h3 className=\"card-message__time\">{getTimeInFormat(currentHour)}</h3>\r\n      <div className={`card-message__marker card-message__marker_${role}`}>\r\n        {role[0]}\r\n      </div>\r\n      <h4 className=\"card-message__email\">{email}</h4>\r\n      <div className=\"card-message__message\">{message}</div>\r\n      <div className=\"card-message__buttons\">\r\n        <button\r\n          className=\"button button__prim\"\r\n          onClick={() => handleOpenModalClick(MODAL_TYPES.VIEW)}\r\n        >\r\n          View\r\n        </button>\r\n        {id === userId && USER_ROLES.VIEWER !== roleCurrentUser && (\r\n          <React.Fragment>\r\n            <button\r\n              className=\"button button__prim\"\r\n              onClick={() => handleOpenModalClick(MODAL_TYPES.UPDATE)}\r\n            >\r\n              Update\r\n            </button>\r\n            <button\r\n              className=\"button button__prim\"\r\n              onClick={handleRemoveButtonClick}\r\n            >\r\n              Remove\r\n            </button>\r\n          </React.Fragment>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardMessage;\r\n","function getDateInFormat(dateInMilliseconds: number): string {\r\n  const date = new Date(dateInMilliseconds);\r\n  const year = date.getFullYear();\r\n  const month = date.getMonth() + 1;\r\n  const day = date.getDate();\r\n  return `${day < 10 ? \"0\" + day : day}-${month < 10 ? \"0\" + month : month}-${year}`;\r\n}\r\n\r\nexport default getDateInFormat;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport IStore from \"../../../redux/interfaceStore\";\r\nimport { openModal, setCurrentHour } from \"../../../redux/actions\";\r\nimport getTimeInFormat from \"../../../services/getTimeInFormat\";\r\n\r\nimport { MODAL_TYPES, USER_ROLES } from '../../../data';\r\n\r\nconst CardEmpty = ({ currentHour }: { currentHour: number }): JSX.Element => {\r\n  const { role } = useSelector((store: IStore) => store.auth.user);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleOpenModalClick = () => {\r\n    dispatch(setCurrentHour(currentHour));\r\n    dispatch(openModal(MODAL_TYPES.ADD));\r\n  };\r\n\r\n  return (\r\n    <div className=\"card-message border_bottom\">\r\n      <h3 className=\"card-message__time\">{getTimeInFormat(currentHour)}</h3>\r\n      <div className=\"card-message__message\">Add note...</div>\r\n      <div className=\"card-message__buttons\">\r\n        {USER_ROLES.VIEWER !== role && (\r\n          <button\r\n            className=\"button button__prim\"\r\n            onClick={handleOpenModalClick}\r\n          >\r\n            Add\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardEmpty;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport IStore from \"../../../redux/interfaceStore\";\r\nimport CardMessage from \"../CardMessage\";\r\nimport { MessagesSpecificDateType } from '../../../types/messagesDataTypes';\r\nimport getDateInFormat from '../../../services/getDateInFormat';\r\nimport CardEmpty from \"../CardEmpty\";\r\n\r\nconst Day = (): JSX.Element => {\r\n  const { idSelectedDate, selectedDate } = useSelector((store: IStore) => store.calendar);\r\n  const { messages } = useSelector((store: IStore) => store.messages);\r\n  const messagesTargetDay = messages.find((messagesDay: MessagesSpecificDateType) => messagesDay.id === idSelectedDate);\r\n\r\n  return (\r\n    <div className=\"day-list\">\r\n      <div className=\"day-list__header border_bottom\">\r\n        <div className=\"day-list__day-name\">\r\n          {getDateInFormat(selectedDate!.getTime())}\r\n        </div>\r\n      </div>\r\n      <div className=\"day-list__group\">\r\n        {messagesTargetDay &&\r\n          messagesTargetDay.messages.map((message: any, index: number) =>\r\n            message ? (\r\n              <CardMessage key={index} message={message} />\r\n            ) : (\r\n              <CardEmpty key={index} currentHour={index} />\r\n            )\r\n          )}\r\n\r\n        {!messagesTargetDay &&\r\n          Array(24)\r\n            .fill(null)\r\n            .map((el, index) => <CardEmpty key={index} currentHour={index} />)}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Day;\r\n","import React from \"react\";\r\n\r\nimport CardMessage from \"../../CardMessage\";\r\nimport getDateInFormat from '../../../../services/getDateInFormat';\r\nimport { SegmentGroupPropsType } from '../../../../types/segmentGroupTypes';\r\n\r\nconst SegmentGroup = ({ group }: SegmentGroupPropsType): JSX.Element => {\r\n  return (\r\n    <div className=\"segment-group\">\r\n      <h3 className=\"segment-group__date\">{getDateInFormat(group.id)}</h3>\r\n      {group.messages.map((message, index) => message && (\r\n        <CardMessage key={index} message={message} groupId={group.id}/>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SegmentGroup;\r\n","function verificationFilterInput(currentValueInput: string):string {\r\n  // описать верификацию в формате dd/mm/yyyy\r\n  return currentValueInput;\r\n}\r\n\r\nexport default verificationFilterInput;\r\n","import isEmpty from \"./isEmpty\";\r\nimport { REG_EXP_CHECK_DATE } from '../data';\r\n\r\nexport type ValidationFilterFormPropsType = {\r\n  startParam: string\r\n  endParam: string\r\n}\r\nexport type ValidationFilterFormErrorsType = {\r\n  startParam?: string\r\n  endParam?: string\r\n  warning?:string \r\n}\r\nexport type ReturnValidationFilterFormType = {\r\n  errors: ValidationFilterFormErrorsType\r\n  isValid: boolean\r\n}\r\n\r\nfunction validationFilterForm(data: ValidationFilterFormPropsType): ReturnValidationFilterFormType {\r\n  const errors: ValidationFilterFormErrorsType = {};\r\n  if (!data.startParam.match(REG_EXP_CHECK_DATE)) {\r\n    errors.startParam = \"Date entered in the wrong format\";\r\n  }\r\n  if (!data.endParam.match(REG_EXP_CHECK_DATE)) {\r\n    errors.endParam = \"Date entered in the wrong format\";\r\n  }\r\n  if (isEmpty(data.startParam)) {\r\n    errors.startParam = \"Enter the date\";\r\n  }\r\n  if (isEmpty(data.endParam)) {\r\n    errors.endParam = \"Enter the date\";\r\n  }\r\n  return {\r\n    errors,\r\n    isValid: isEmpty(errors),\r\n  };\r\n}\r\n\r\nexport default validationFilterForm;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport IStore from \"../../../redux/interfaceStore\";\r\nimport SegmentGroup from \"./SegmentGroup\";\r\nimport verificationFilterInput from \"../../../services/verificationFilterInput\";\r\nimport getDateInFormat from \"../../../services/getDateInFormat\";\r\nimport validationFilterForm, { ValidationFilterFormPropsType, ValidationFilterFormErrorsType } from \"../../../services/validationFilterForm\";\r\nimport { MessagesSpecificDateType } from '../../../types/messagesDataTypes';\r\nimport { GroupPropsType } from '../../../types/segmentGroupTypes';\r\n\r\nconst Segment = (): JSX.Element => {\r\n  const { isNoMessages, messages } = useSelector((store: IStore) => store.messages);\r\n  const [messagesLocalStorage, setMessagesLocalStorage] = React.useState(messages);\r\n\r\n  const [errorsFilter, setErrorsFilter] = React.useState<ValidationFilterFormErrorsType>({});\r\n\r\n  const [paramsFilter, setParamFilter] = React.useState<ValidationFilterFormPropsType>({\r\n    startParam: \"\",\r\n    endParam: \"\",\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    setMessagesLocalStorage(messages);\r\n  }, [messages]);\r\n\r\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setParamFilter({\r\n      ...paramsFilter,\r\n      [event.target.name]: verificationFilterInput(event.target.value),\r\n    });\r\n    setErrorsFilter({\r\n      ...errorsFilter,\r\n      [event.target.name]: \"\",\r\n      warning: \"\",\r\n    });\r\n  };\r\n\r\n  const handleSubmitForm = (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n    const { isValid, errors } = validationFilterForm(paramsFilter);\r\n    if (isValid) {\r\n      const arrayStartParam = paramsFilter.startParam.split(\"/\");\r\n      const arrayEndParam = paramsFilter.endParam.split(\"/\");\r\n      let indexStartParam = new Date(+arrayStartParam[2], +arrayStartParam[1] - 1, +arrayStartParam[0]).getTime();\r\n      let indexEndParam = new Date(+arrayEndParam[2], +arrayEndParam[1] - 1, +arrayEndParam[0]).getTime();\r\n\r\n      if (indexStartParam < indexEndParam) {\r\n        [indexStartParam, indexEndParam] = [indexEndParam, indexStartParam];\r\n        setParamFilter({\r\n          ...paramsFilter,\r\n          startParam: paramsFilter.endParam,\r\n          endParam: paramsFilter.startParam,\r\n        });\r\n        setErrorsFilter({\r\n          ...errorsFilter,\r\n          warning: \"Dates are swapped\",\r\n        });\r\n      }\r\n      const filteredData = messages.filter((el: MessagesSpecificDateType) => el.id <= indexStartParam && el.id >= indexEndParam);\r\n      setMessagesLocalStorage(filteredData);\r\n    } else {\r\n      setErrorsFilter(errors);\r\n    }\r\n  };\r\n\r\n  const handleResetButtonClick = () => {\r\n    setMessagesLocalStorage(messages);\r\n    setErrorsFilter({});\r\n  }\r\n\r\n  return (\r\n    <div className=\"segment\">\r\n      <div className=\"segment__header border_bottom\">\r\n        {/* возможно нужно вынести filter в отдельный компонент ??? */}\r\n        <h2 className=\"segment__header-title\">\r\n          {messagesLocalStorage.length > 1 &&\r\n            `Notes from ${getDateInFormat(messagesLocalStorage[0].id)} to ${getDateInFormat(messagesLocalStorage[messagesLocalStorage.length - 1].id)}`}\r\n\r\n          {messagesLocalStorage.length === 1 &&\r\n            `Notes for the ${getDateInFormat(messagesLocalStorage[0].id)}`}\r\n\r\n          {messagesLocalStorage.length === 0 && `No notes`}\r\n        </h2>\r\n        <form className=\"filter-messages-form\" onSubmit={handleSubmitForm}>\r\n\r\n          <div className=\"filter-messages-form__warning-feedback\">{errorsFilter.warning}</div>\r\n\r\n          <div className=\"filter-messages-form__wrapper\">\r\n            <div className=\"filter-messages-form__group\">\r\n              <input\r\n                className=\"filter-messages-form__input\"\r\n                type=\"text\"\r\n                name=\"startParam\"\r\n                value={paramsFilter.startParam}\r\n                onChange={handleInputChange}\r\n                placeholder=\"dd/mm/yyyy\"\r\n              />\r\n\r\n              <div className=\"filter-messages-form__error-feedback\">{errorsFilter.startParam}</div>\r\n\r\n            </div>\r\n            <div className=\"filter-messages-form__group\">\r\n              <input\r\n                className=\"filter-messages-form__input\"\r\n                type=\"text\"\r\n                name=\"endParam\"\r\n                value={paramsFilter.endParam}\r\n                onChange={handleInputChange}\r\n                placeholder=\"dd/mm/yyyy\"\r\n              />\r\n\r\n              <div className=\"filter-messages-form__error-feedback\">{errorsFilter.endParam}</div>\r\n\r\n            </div>\r\n          </div>\r\n          <div className=\"filter-messages-form__buttons\">\r\n          <button className=\"button button__prim filter-messages-form__button\">\r\n            filter\r\n          </button>\r\n          <button type='button' className=\"button button__prim filter-messages-form__button\" onClick={handleResetButtonClick}>\r\n            reset\r\n          </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n      {!isNoMessages && messagesLocalStorage && (\r\n        <React.Fragment>\r\n          {messagesLocalStorage.map((group: GroupPropsType, index: number) => (\r\n            <SegmentGroup key={index} group={group} index={index} />\r\n          ))}\r\n        </React.Fragment>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Segment;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RouteComponentProps, withRouter, useRouteMatch } from \"react-router-dom\";\r\n\r\nimport IStore from \"../../../../redux/interfaceStore\";\r\nimport { UserMessageDataType, MessagesSpecificDateType } from '../../../../types/messagesDataTypes';\r\nimport { updateSelectedDate } from \"../../../../redux/actions\";\r\nimport { DayDataType } from \"../../../../redux/calendar/calendarReducer\";\r\nimport getTimeInFormat from \"../../../../services/getTimeInFormat\";\r\n\r\nexport interface DayOfTheWeekPropsType extends RouteComponentProps<any> {\r\n  dayData: DayDataType;\r\n}\r\nconst DayOfTheWeek = ({ history, dayData: { date, isCurrentMonth }}: DayOfTheWeekPropsType): JSX.Element => {\r\n  const { messages } = useSelector((store: IStore) => store.messages);\r\n  const dispatch = useDispatch();\r\n  const { path } = useRouteMatch();\r\n  const [localStorage, setLocalStorage] = React.useState<(UserMessageDataType | null)[]>([]);\r\n\r\n  React.useEffect(() => {\r\n    setLocalStorage([]);\r\n    const messagesDay = messages.find((el: MessagesSpecificDateType) => el.id === date.getTime());\r\n    // Почему-то после фильтрации нужно всеравно предусматривать вариант с null...\r\n    const firstThreeMessagesDay = messagesDay && messagesDay.messages.filter((el: UserMessageDataType | null) => el !== null).slice(0,3);\r\n    if (firstThreeMessagesDay) setLocalStorage(firstThreeMessagesDay);\r\n  }, [date, messages]);\r\n\r\n  const handleSelectedDateClick = () => {\r\n    dispatch(updateSelectedDate(date));\r\n    history.push(`${path}/day`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"month-list__day\">\r\n      <div\r\n        className={`month-list__day-header ${\r\n          isCurrentMonth\r\n            ? \"month-list__day-header_current\"\r\n            : \"month-list__day-header_other\"\r\n        }`}\r\n        onClick={handleSelectedDateClick}\r\n      >\r\n        <div className=\"month-list__day-number\">{date.getDate()}</div>\r\n      </div>\r\n      <ul className=\"month-list__day-tasks\">\r\n        {localStorage.map(\r\n          (el: UserMessageDataType | null, index: number) =>\r\n            el && (\r\n              <li key={index} className=\"month-list__day-task\">\r\n                <h3 className=\"month-list__day-task-time\">\r\n                  {getTimeInFormat(el.currentHour)}\r\n                </h3>\r\n                <p className=\"month-list__day-task-text\">{el.message}</p>\r\n              </li>\r\n            )\r\n        )}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(DayOfTheWeek);\r\n","import React from \"react\";\r\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\r\n\r\nimport { DayDataType } from \"../../../../redux/calendar/calendarReducer\";\r\nimport DayOfTheWeek from \"../DayOfTheWeek\";\r\n\r\nexport interface WeekOfTheMonthPropTypes extends RouteComponentProps<any> {\r\n  weekData: DayDataType[];\r\n  weekNumber: number;\r\n}\r\n\r\nconst WeekOfTheMonth = ({ weekData, weekNumber }: WeekOfTheMonthPropTypes): JSX.Element => {\r\n  return (\r\n    <div key={weekNumber} className=\"month-list__week border_bottom\">\r\n      {weekData.map((day, index) => (\r\n        <DayOfTheWeek key={index} dayData={day} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(WeekOfTheMonth);\r\n","import React from \"react\";\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport IStore from \"../../../redux/interfaceStore\";\r\nimport { DayDataType } from \"../../../redux/calendar/calendarReducer\";\r\nimport WeekOfTheMonth from './WeekOfTheMonth';\r\n\r\nimport { WEEK_DAY_NAMES } from '../../../data';\r\n\r\nconst Month = (): JSX.Element => {\r\n  const { data } = useSelector((store: IStore) => store.calendar);\r\n  \r\n  return  (\r\n    <div className=\"month-list\">\r\n      <div className=\"month-list__header border_bottom\">\r\n        {WEEK_DAY_NAMES.map((name, index) => (\r\n          <span key={index} className=\"month-list__day-name\">\r\n            {name}\r\n          </span>\r\n        ))}\r\n      </div>\r\n      {data?.map((week: DayDataType[], index: number) => (\r\n        <WeekOfTheMonth key={index} weekData={week} weekNumber={index} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\nexport default Month;\r\n","import React from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\n\r\nimport Day from \"./Day\";\r\nimport Segment from \"./Segment\";\r\nimport Month from \"./Month\";\r\n\r\nconst Calendar = (): JSX.Element => {\r\n  return (\r\n    <div className=\"calendar\">\r\n      <Switch>\r\n        <Route exact path=\"/calendar\" component={Month} />\r\n        <Route exact path=\"/calendar/segment\" component={Segment} />\r\n        <Route exact path=\"/calendar/day\" component={Day} />\r\n        {/* <Route component={NotFound} /> */}\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Calendar;\r\n","import React from \"react\";\r\nimport { withRouter, useRouteMatch } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport IStore from \"../../../../redux/interfaceStore\";\r\nimport { DayOfTheWeekPropsType } from \"../../Month/DayOfTheWeek\";\r\nimport { updateSelectedDate } from \"../../../../redux/actions\";\r\n\r\nconst WidgetDayOfTheWeek = ({ history, dayData: { date, isCurrentMonth } }: DayOfTheWeekPropsType): JSX.Element => {\r\n  const { path } = useRouteMatch();\r\n  const dispatch = useDispatch();\r\n  const { selectedDate, currentDate } = useSelector((store: IStore) => store.calendar);\r\n\r\n  const isCurrentDate = currentDate!.getTime() === date.getTime();\r\n  const isSelectedDate = selectedDate && selectedDate.getTime() === date.getTime();\r\n  \r\n  const handleSelectedDateClick =()=>{\r\n    dispatch(updateSelectedDate(date))\r\n    history.push(`${path}/day`);\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={`widget-month__day \r\n      ${!isCurrentMonth ? \"widget-month__day_shadowed\" : \"\"} \r\n      ${isCurrentDate ? \"widget-month__day_current\" : \"\"}\r\n      ${isSelectedDate ? \"widget-month__day_selected\" : \"\"}`}\r\n      onClick={handleSelectedDateClick}\r\n    >\r\n      <span className=\"widget-month__day__number\">{date.getDate()}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(WidgetDayOfTheWeek);","import React from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { WeekOfTheMonthPropTypes } from \"../../Month/WeekOfTheMonth\";\r\nimport WidgetDayOfTheWeek from \"../WidgetDayOfTheWeek\";\r\n\r\nconst WidgetWeekOfTheMonth = ({ weekData, weekNumber }: WeekOfTheMonthPropTypes) => {\r\n  return (\r\n    <div key={weekNumber} className=\"widget-month__week\">\r\n      {weekData.map((day, index: number) => (\r\n        <WidgetDayOfTheWeek key={index} dayData={day} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(WidgetWeekOfTheMonth);\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport IStore from \"../../../redux/interfaceStore\";\r\nimport { updateDataMonth } from \"../../../redux/actions\";\r\n\r\nconst MonthToggle = (): JSX.Element => {\r\n  const dispatch = useDispatch();\r\n  const { basicDate } = useSelector((store: IStore) => store.calendar);\r\n\r\n  const handlePrevMonthButtonClick = () => {\r\n    const date = new Date(basicDate!.getFullYear(), basicDate!.getMonth() - 1);\r\n    dispatch(updateDataMonth(date));\r\n  };\r\n\r\n  const handleNextMonthButtonClick = () => {\r\n    const date = new Date(basicDate!.getFullYear(), basicDate!.getMonth() + 1);\r\n    dispatch(updateDataMonth(date));\r\n  };\r\n\r\n  return (\r\n    <div className=\"month-toggle\">\r\n      <button\r\n        className=\"month-toggle__button\"\r\n        onClick={handlePrevMonthButtonClick}\r\n      >\r\n        ❮\r\n      </button>\r\n      <button\r\n        className=\"month-toggle__button\"\r\n        onClick={handleNextMonthButtonClick}\r\n      >\r\n        ❯\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\nexport default MonthToggle;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport IStore from \"../../../redux/interfaceStore\";\r\nimport { DayDataType } from \"../../../redux/calendar/calendarReducer\";\r\nimport WidgetWeekOfTheMonth from \"./WidgetWeekOfTheMonth\";\r\nimport MonthToggle from \"../MonthToggle\";\r\n\r\nimport { MONTH_NAMES, WEEK_DAY_NAMES } from '../../../data';\r\n\r\nconst WidgetMonth = (): JSX.Element => {\r\n  const { basicDate, data } = useSelector((store: IStore) => store.calendar);\r\n\r\n  return (\r\n    <div className=\"widget-month border_bottom\">\r\n      <div className=\"widget-month__header border_bottom\">\r\n        <h3 className=\"widget-month__date\">\r\n          {MONTH_NAMES[basicDate!.getMonth()]}{\" \"}\r\n          {basicDate!.getFullYear()}\r\n        </h3>\r\n        <MonthToggle />\r\n      </div>\r\n      <div className=\"widget-month__list border_bottom\">\r\n        <div className=\"widget-month__list-header\">\r\n          {WEEK_DAY_NAMES.map((name: string, index: number) => (\r\n            <span key={index} className=\"widget-month__day-name\">\r\n              {name}\r\n            </span>\r\n          ))}\r\n        </div>\r\n        {data!.map((weekData: DayDataType[], index: number) => (\r\n          <WidgetWeekOfTheMonth\r\n            key={index}\r\n            weekData={weekData}\r\n            weekNumber={index}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WidgetMonth;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport { ModelUserType } from \"../../../services/getModelUser\";\r\n\r\nimport { BACKEND_URL, USER_ROLES } from '../../../data';\r\n\r\nconst UserItem = ({ user, setAllUsers }: { user: ModelUserType, setAllUsers: () => void }): JSX.Element => {\r\n  const [isVisibleButttons, setIsVisibleButttons] = React.useState(false);\r\n\r\n  const handleUpdateRoleClick = (role: string) => {\r\n    const updateDataUser = {\r\n      ...user,\r\n      role\r\n    }\r\n    axios\r\n      .put(`${BACKEND_URL}/data-users/${user.id}`, updateDataUser)\r\n      .then(()=>{\r\n        setAllUsers();\r\n      })\r\n    console.log(`Смена роли пользователя ${user.email} с ${user.role} на ${role} с последующим запросом на обновленный лист users`);\r\n  };\r\n\r\n  return (\r\n    <li\r\n      className={`user user_decor-${user.role}`}\r\n      onClick={() => setIsVisibleButttons(!isVisibleButttons)}\r\n    >\r\n      <h4 className=\"user__email\">{user.email}</h4>\r\n      {isVisibleButttons && (\r\n        <div className=\"user__buttons\">\r\n          <div\r\n            className={`button button__add ${user.role === USER_ROLES.USER ? \"button_selected\" : \"\"}`}\r\n            onClick={() => handleUpdateRoleClick(USER_ROLES.USER)}\r\n          >\r\n            User\r\n          </div>\r\n          <div\r\n            className={`button button__add ${user.role === USER_ROLES.VIEWER ? \"button_selected\" : \"\"}`}\r\n            onClick={() => handleUpdateRoleClick(USER_ROLES.VIEWER)}\r\n          >\r\n            Viewer\r\n          </div>\r\n        </div>\r\n      )}\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default UserItem;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport UserItem from \"./UserItem\";\r\nimport { ModelUserType } from \"../../services/getModelUser\";\r\nimport IStore from \"../../redux/interfaceStore\";\r\n\r\nimport { BACKEND_URL } from '../../data';\r\n\r\nconst UsersList = (): JSX.Element => {\r\n  const { id } = useSelector((store: IStore) => store.auth.user);\r\n  const [isLoaded, setIsLoaded] = React.useState(false);\r\n  const [listUsers, setListUsers] = React.useState<ModelUserType[]>([]);\r\n\r\n  const setAllUsers = React.useCallback(() => {\r\n    axios\r\n      .get(`${BACKEND_URL}/data-users/?id_ne=${id}`)\r\n      .then((res) => {\r\n        const listUsers = res.data;\r\n        setListUsers(listUsers);\r\n        setIsLoaded(true);\r\n      });\r\n  }, [id]);\r\n\r\n  React.useEffect(() => {\r\n    setAllUsers();\r\n  }, [setAllUsers]);\r\n\r\n  return (\r\n    <div className=\"users-list\">\r\n      <h2 className=\"users-list__title border_bottom\">All users</h2>\r\n      {isLoaded ? (\r\n        <ul className=\"users-list__users border_bottom\">\r\n          {listUsers.map((user: ModelUserType, index: number) => (\r\n            <UserItem key={index} user={user} setAllUsers={setAllUsers} />\r\n          ))}\r\n        </ul>\r\n      ) : (\r\n        <div>Loading</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UsersList;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport IStore from \"../../redux/interfaceStore\";\r\nimport WidgetMonth from '../Calendar/WidgetMonth';\r\nimport UsersList from \"../UsersList\";\r\n\r\nimport { USER_ROLES } from '../../data';\r\n\r\nconst SideBar = ({ isOpenSideBar }: { isOpenSideBar: boolean }): JSX.Element => {\r\n  const { role, email } = useSelector((store: IStore) => store.auth.user);\r\n\r\n  return (\r\n    <div className={`side-bar ${isOpenSideBar ? \"side-bar_visible\" : \"\"}`}>\r\n      <div className ='side-bar__wrapper'>\r\n      <h2 className=\"side-bar__email border_bottom\">{email}</h2>\r\n\r\n      <WidgetMonth />\r\n      {role === USER_ROLES.ADMIN ? <UsersList /> : null}\r\n    </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SideBar;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport IStore from \"../../redux/interfaceStore\";\r\nimport { updateDataMonth, updateSelectedDate } from \"../../redux/actions\";\r\nimport MonthToggle from \"../Calendar/MonthToggle\";\r\n\r\nimport { MONTH_NAMES } from '../../data';\r\n\r\ntype HeaderPropsType = {\r\n  isOpenSideBar: boolean;\r\n  setIsOpenSideBar: React.Dispatch<boolean>;\r\n}\r\n\r\nconst Header = ({ isOpenSideBar, setIsOpenSideBar }: HeaderPropsType): JSX.Element => {\r\n    // Не знаю как решить данную проблему, связанную с вариативностью типов basicDate, currentDate\r\n  const dispatch = useDispatch();\r\n  const { basicDate, currentDate } = useSelector((store: IStore) => store.calendar);\r\n  const { email } = useSelector((store: IStore) => store.auth.user);\r\n\r\n  const handleCurrentDateButtonClick = () => {\r\n    dispatch(updateSelectedDate(currentDate!));\r\n    dispatch(updateDataMonth(currentDate!));\r\n  };\r\n  \r\n  const handleToggleAsideButtonClick = () => {\r\n    setIsOpenSideBar(!isOpenSideBar);\r\n  };\r\n\r\n  return (\r\n    <header className=\"header border_bottom\">\r\n      <div className=\"wrapper\">\r\n        <div className=\"header__wrapper\">\r\n          <div className=\"header__group\">\r\n            <span className=\"hamburger\" onClick={handleToggleAsideButtonClick}>\r\n              <span className=\"hamburger__line\"></span>\r\n            </span>\r\n            <h2 className=\"header__email\">{email}</h2>\r\n            <MonthToggle />\r\n            <h2 className=\"header__date\">\r\n              {MONTH_NAMES[basicDate!.getMonth()]}{\" \"}\r\n              {basicDate!.getFullYear()}\r\n            </h2>\r\n            <Link to=\"/calendar\" className=\"button header__button button__add\">\r\n              calendar\r\n            </Link>\r\n            <Link to=\"/calendar/segment\" className=\"button header__button button__add\">\r\n              all notes\r\n            </Link>\r\n            <Link\r\n              to=\"/calendar/day\"\r\n              className=\"button header__button button__add\"\r\n              onClick={handleCurrentDateButtonClick}\r\n            >\r\n              today\r\n            </Link>\r\n          </div>\r\n\r\n          <Link to=\"/logout\" className=\"button header__button button__add\">\r\n            logout\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport IStore from \"../../redux/interfaceStore\";\r\nimport isEmpty from \"../../services/isEmpty\";\r\nimport getDateInFormat from \"../../services/getDateInFormat\";\r\nimport getTimeInFormat from \"../../services/getTimeInFormat\";\r\nimport { UserMessageDataType, MessagesSpecificDateType } from '../../types/messagesDataTypes';\r\nimport { requestAllMessages, setCurrentHour, closeModal } from \"../../redux/actions\";\r\n\r\nimport { BACKEND_URL, MODAL_TYPES } from '../../data';\r\n\r\nfunction AddUpdateMessageModal(): JSX.Element {\r\n  const { idSelectedDate, currentHour } = useSelector((store: IStore) => store.calendar);\r\n  const { email, id, role } = useSelector((store: IStore) => store.auth.user);\r\n  const { messages } = useSelector((store: IStore) => store.messages);\r\n  const { modalType } = useSelector((store: IStore) => store.modal);\r\n  const dispatch = useDispatch();\r\n   \r\n  const [stateMessageModal, setStateMessageModal] = React.useState<UserMessageDataType>({\r\n    userId: id!,\r\n    title: \"\",\r\n    message: \"\",\r\n    currentHour: currentHour!,\r\n    email: email!,\r\n    role: role!,\r\n  });\r\n\r\n  const messagesTargetDay = messages.find((messagesDay: MessagesSpecificDateType) => messagesDay.id === idSelectedDate);\r\n  \r\n  React.useEffect(() => {\r\n    if (messagesTargetDay && messagesTargetDay.messages[currentHour!]) {\r\n      const targetMessage = messagesTargetDay.messages[currentHour!];\r\n      targetMessage  && setStateMessageModal(targetMessage);\r\n    }\r\n  }, [currentHour, messagesTargetDay]);\r\n\r\n  const handleInputChange = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\r\n    setStateMessageModal({\r\n      ...stateMessageModal,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  const handleAddUpdateButtonClick = () => {\r\n    if (!isEmpty(stateMessageModal.message)) {\r\n      if (messagesTargetDay) {\r\n        messagesTargetDay.messages[currentHour!] = stateMessageModal;\r\n        axios\r\n          .put( `${BACKEND_URL}/messages/${idSelectedDate}`, messagesTargetDay)\r\n          .then(() => {\r\n            dispatch(requestAllMessages());\r\n            dispatch(setCurrentHour(null));\r\n            dispatch(closeModal());\r\n          });\r\n      } else {\r\n        const array = new Array(24);\r\n        array[currentHour!] = stateMessageModal;\r\n        const data = {\r\n          id: idSelectedDate,\r\n          messages: array,\r\n        };\r\n        axios\r\n          .post(`${BACKEND_URL}/messages`, data)\r\n          .then(() => {\r\n            dispatch(requestAllMessages());\r\n            dispatch(setCurrentHour(null));\r\n            dispatch(closeModal());\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"add-update-message-card\">\r\n      <div className=\"add-update-message-card__header\">\r\n\r\n        <h3 className=\"add-update-message-card__date\">\r\n          Date: {getDateInFormat(idSelectedDate!)} \r\n          <br />\r\n          <br /> \r\n          Time: {getTimeInFormat(currentHour!)}\r\n        </h3>\r\n\r\n        <h3 className=\"add-update-message-card__author\">{email}</h3>\r\n\r\n      </div>\r\n\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"title\"\r\n        className=\"input add-update-message-card__input\"\r\n        name=\"title\"\r\n        value={stateMessageModal.title}\r\n        onChange={handleInputChange}\r\n      />\r\n\r\n      <textarea\r\n        placeholder=\"note\"\r\n        className=\"input add-update-message-card__textarea\"\r\n        name=\"message\"\r\n        value={stateMessageModal.message}\r\n        onChange={handleInputChange}\r\n      />\r\n\r\n      <div className=\"add-update-message-card__buttons\">\r\n        {MODAL_TYPES.UPDATE === modalType && (\r\n          <button\r\n            className=\"button button__prim\"\r\n            onClick={handleAddUpdateButtonClick}\r\n          >\r\n            update\r\n          </button>\r\n        )}\r\n\r\n        {MODAL_TYPES.ADD === modalType && (\r\n          <button\r\n            className=\"button button__prim\"\r\n            onClick={handleAddUpdateButtonClick}\r\n          >\r\n            add\r\n          </button>\r\n        )}\r\n        \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddUpdateMessageModal;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport IStore from \"../../redux/interfaceStore\";\r\nimport getDateInFormat from \"../../services/getDateInFormat\";\r\nimport getTimeInFormat from \"../../services/getTimeInFormat\";\r\nimport { MessagesSpecificDateType } from '../../types/messagesDataTypes';\r\n\r\nfunction ViewMessageModal(): JSX.Element {\r\n    // Не знаю как решить данную проблему, связанную с вариативностью типов messages\r\n  const { idSelectedDate, currentHour } = useSelector((store: IStore) => store.calendar);\r\n  const { messages } = useSelector((store: any) => store.messages);\r\n  const messagesTargetDay = messages.find((messagesDay: MessagesSpecificDateType) => messagesDay.id === idSelectedDate);\r\n  \r\n  return (\r\n    <div className=\"view-message-card\">\r\n      <div className=\"view-message-card__header\">\r\n        <h3 className=\"view-message-card__date\">\r\n          Date: {getDateInFormat(idSelectedDate!)}\r\n          <br />\r\n          <br />\r\n          Time: {getTimeInFormat(currentHour!)}\r\n        </h3>\r\n        <h3 className=\"view-message-card__author\">\r\n          {messagesTargetDay.messages[currentHour!].email}\r\n        </h3>\r\n      </div>\r\n      <h2 className=\"view-message-card__title\">\r\n        {messagesTargetDay.messages[currentHour!].title}\r\n      </h2>\r\n      <p className=\"view-message-card__text\">\r\n        {messagesTargetDay.messages[currentHour!].message}\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ViewMessageModal;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport IStore from \"../../redux/interfaceStore\";\r\nimport AddUpdateMessageModal from \"../AddUpdateMessageModal\";\r\nimport ViewMessageModal from \"../ViewMessageModal\";\r\nimport { closeModal, setCurrentHour } from \"../../redux/actions\";\r\n\r\nimport { MODAL_TYPES } from '../../data';\r\n\r\nfunction Modal():JSX.Element {\r\n  const { modalType } = useSelector((store: IStore) => store.modal);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleCloseButtonClick = () => {\r\n    dispatch(setCurrentHour(null));\r\n    dispatch(closeModal());\r\n  };\r\n\r\n  return (\r\n    <div className=\"modal modal_visibility\">\r\n      <div className=\"modal__wrapper\">\r\n        <span\r\n          className=\"modal__close-button\"\r\n          onClick={handleCloseButtonClick}\r\n        ></span>\r\n        {MODAL_TYPES.ADD === modalType && <AddUpdateMessageModal />}\r\n        {MODAL_TYPES.UPDATE === modalType && <AddUpdateMessageModal />}\r\n        {MODAL_TYPES.VIEW === modalType && <ViewMessageModal />}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Modal;\r\n","import React from \"react\";\r\nimport {Redirect, Link} from 'react-router-dom';\r\nimport {useSelector} from 'react-redux';\r\n\r\nimport IStore from \"../../redux/interfaceStore\";\r\nimport { SignInForm, SignUpForm } from \"../../components\";\r\n\r\nconst Login = (): JSX.Element => {\r\n  const [isSignUpForm, toggleIsSignUpForm] = React.useState(false);\r\n  const [registerUserEmail, setRegisterUserEmail] = React.useState('');\r\n  const isAuthenticated = useSelector((state: IStore) => state.auth.isAuthenticated);\r\n\r\n  const handleToggleButtonClick = () => {\r\n    toggleIsSignUpForm(!isSignUpForm);\r\n  };\r\n\r\n  return isAuthenticated ? (\r\n    <Redirect exact to='/calendar' />\r\n  ) : (\r\n    <div className=\"login\">\r\n      <div className='wrapper'>\r\n      <div className=\"login__wrapper\">\r\n      <Link to ='/' className=\"button login__button button__add\">landing page</Link>\r\n        {isSignUpForm ? (\r\n          <SignUpForm handleToggleButtonClick={handleToggleButtonClick} setRegisterUserEmail={setRegisterUserEmail}/>\r\n        ) : (\r\n          <SignInForm handleToggleButtonClick={handleToggleButtonClick} registerUserEmail={registerUserEmail}/>\r\n        )}\r\n      </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n\r\n","import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { setAuthUser } from \"../../redux/actions\";\r\nimport setAuthToken from \"../../services/setAuthToken\";\r\n\r\nconst Logout = (): JSX.Element => {\r\n  const dispatch = useDispatch();\r\n\r\n  React.useEffect(() => {\r\n    localStorage.removeItem(\"accessToken\");\r\n    setAuthToken(false);\r\n    dispatch(setAuthUser({}));\r\n  }, [dispatch]);\r\n\r\n  return <Redirect exact to=\"/\" />;\r\n};\r\n\r\nexport default Logout;\r\n","import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { useRouteMatch } from \"react-router-dom\";\r\n\r\nconst NotFound = (): JSX.Element => {\r\n  const [redirect, setRedirect] = React.useState(false);\r\n  const match = useRouteMatch();\r\n\r\n  const handleRedirectButtonClick = () => {\r\n    setRedirect(true);\r\n  };\r\n\r\n  return redirect ? (\r\n    <Redirect exact to={match.url} />\r\n  ) : (\r\n    <div className=\"not-found\">\r\n      <div className=\"wrapper\">\r\n        <div className=\"not-found__wrapper\">\r\n          <h2 className=\"not-found__title\">NotFound</h2>\r\n          <button\r\n            className=\"button button__add\"\r\n            onClick={handleRedirectButtonClick}\r\n          >\r\n            to home\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport IStore from \"../../redux/interfaceStore\";\r\nimport { MainWrapper, Calendar, Header, SideBar, Modal } from \"../../components\";\r\n\r\nconst Main = ():JSX.Element => {\r\n  const { isAuthenticated } = useSelector((state: IStore) => state.auth);\r\n  const { isOpenModal } = useSelector((state: IStore) => state.modal);\r\n  const [isOpenSideBar, setIsOpenSideBar] = React.useState(true);\r\n\r\n  return !isAuthenticated ? (\r\n    <Redirect to=\"/login\" />\r\n  ) : (\r\n    <MainWrapper>\r\n      <Header\r\n        isOpenSideBar={isOpenSideBar}\r\n        setIsOpenSideBar={setIsOpenSideBar}\r\n      />\r\n      <div className=\"main\">\r\n        <div className=\"wrapper\">\r\n          <div className=\"main__wrapper\">\r\n            <SideBar isOpenSideBar={isOpenSideBar} />\r\n            <Calendar />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {isOpenModal && <Modal />}\r\n    </MainWrapper>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from \"react\";\r\n\r\nconst Loading = (): JSX.Element => {\r\n  return (\r\n    <div className=\"loading\">\r\n      <h2 className=\"loading__title\">Loading</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\n\r\nimport { Landing, Login, Logout, NotFound, Main } from \"./pages\";\r\nimport setAuthToken from \"./services/setAuthToken\";\r\nimport { setAuthUser } from \"./redux/actions\";\r\nimport { DecodedTokenType } from \"./types/decodedTokenTypes\";\r\nimport { ModelUserType } from './services/getModelUser'; \r\n\r\nimport { BACKEND_URL } from './data';\r\n\r\nimport \"./scss/style.scss\";\r\n\r\nconst App = (): JSX.Element => {\r\n  const dispatch = useDispatch();\r\n  \r\n  React.useEffect(() => {\r\n    //  возможно нужно всю логику перенести в actions redux, services или создать свой хук???\r\n    if (localStorage.accessToken) {\r\n      const decodedToken: DecodedTokenType = jwt_decode(localStorage.accessToken);\r\n      const idUser = decodedToken.sub;\r\n      const currentTime = Date.now() / 1000;\r\n      if (decodedToken.exp < currentTime) {\r\n        localStorage.removeItem(\"accessToken\");\r\n        setAuthToken(false);\r\n        dispatch(setAuthUser({}));\r\n      } else {\r\n        setAuthToken(localStorage.accessToken);\r\n        axios\r\n          .get(`${BACKEND_URL}/data-users/${idUser}`)\r\n          .then((res: { data: ModelUserType }) => {\r\n            dispatch(setAuthUser(res.data))\r\n          })\r\n          .catch(() => {\r\n            console.log(\r\n              \"В данный момент имеются проблемы с сервером, попробуйте зайти позже...\"\r\n            );\r\n          });\r\n      }\r\n    }\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <BrowserRouter>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Landing} />\r\n          <Route path=\"/calendar\" component={Main} />\r\n          <Route exact path=\"/login\" component={Login} />\r\n          <Route exact path=\"/logout\" component={Logout} />\r\n          <Route component={NotFound} />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport store from \"./redux\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}