[{"C:\\oldVersionCalendar\\calendar-ts\\src\\pages\\Landing\\index.tsx":"1","C:\\oldVersionCalendar\\calendar-ts\\src\\pages\\Logout\\index.tsx":"2","C:\\oldVersionCalendar\\calendar-ts\\src\\pages\\Main\\index.tsx":"3","C:\\oldVersionCalendar\\calendar-ts\\src\\pages\\NotFound\\index.tsx":"4","C:\\oldVersionCalendar\\calendar-ts\\src\\pages\\Login\\index.tsx":"5","C:\\oldVersionCalendar\\calendar-ts\\src\\pages\\Loading\\index.tsx":"6","C:\\oldVersionCalendar\\calendar-ts\\src\\redux\\reducers.ts":"7","C:\\oldVersionCalendar\\calendar-ts\\src\\components\\ViewMessageModal\\index.tsx":"8","C:\\oldVersionCalendar\\calendar-ts\\src\\redux\\users\\usersReducers.ts":"9","C:\\oldVersionCalendar\\calendar-ts\\src\\redux\\modal\\modalReducers.ts":"10","C:\\oldVersionCalendar\\calendar-ts\\src\\redux\\messages\\messagesReducers.ts":"11","C:\\oldVersionCalendar\\calendar-ts\\src\\components\\AddUpdateMessageModal\\index.tsx":"12","C:\\oldVersionCalendar\\calendar-ts\\src\\components\\UsersList\\index.tsx":"13","C:\\oldVersionCalendar\\calendar-ts\\src\\components\\UsersList\\UserItem\\index.tsx":"14","C:\\oldVersionCalendar\\calendar-ts\\src\\components\\SignInForm\\index.tsx":"15","C:\\oldVersionCalendar\\calendar-ts\\src\\components\\SideBar\\index.tsx":"16","C:\\oldVersionCalendar\\calendar-ts\\src\\components\\Modal\\index.tsx":"17","C:\\oldVersionCalendar\\calendar-ts\\src\\components\\MainWrapper\\index.tsx":"18","C:\\oldVersionCalendar\\calendar-ts\\src\\components\\Header\\index.tsx":"19","C:\\oldVersionCalendar\\calendar-ts\\src\\components\\Calendar\\index.tsx":"20","C:\\oldVersionCalendar\\calendar-ts\\src\\components\\Calendar\\Segment\\SegmentGroup\\index.tsx":"21","C:\\oldVersionCalendar\\calendar-ts\\src\\components\\Calendar\\Month\\WeekOfTheMonth\\index.tsx":"22","C:\\oldVersionCalendar\\calendar-ts\\src\\components\\Calendar\\Month\\DayOfTheWeek\\index.tsx":"23","C:\\oldVersionCalendar\\calendar-ts\\src\\components\\Calendar\\Day\\index.tsx":"24","C:\\oldVersionCalendar\\calendar-ts\\src\\components\\Calendar\\CardEmpty\\index.tsx":"25","C:\\oldVersionCalendar\\calendar-ts\\src\\components\\Calendar\\WidgetMonth\\index.tsx":"26","C:\\oldVersionCalendar\\calendar-ts\\src\\components\\Calendar\\WidgetMonth\\WidgetWeekOfTheMonth\\index.tsx":"27","C:\\oldVersionCalendar\\calendar-ts\\src\\components\\Calendar\\WidgetMonth\\WidgetDayOfTheWeek\\index.tsx":"28","C:\\oldVersionCalendar\\calendar-ts\\src\\components\\Calendar\\Segment\\index.tsx":"29","C:\\oldVersionCalendar\\calendar-ts\\src\\components\\Calendar\\MonthToggle\\index.tsx":"30","C:\\oldVersionCalendar\\calendar-ts\\src\\components\\Calendar\\Month\\index.tsx":"31","C:\\oldVersionCalendar\\calendar-ts\\src\\components\\Calendar\\CardMessage\\index.tsx":"32"},{"size":541,"mtime":1612240345215,"results":"33","hashOfConfig":"34"},{"size":517,"mtime":1612240522924,"results":"35","hashOfConfig":"34"},{"size":989,"mtime":1612243321502,"results":"36","hashOfConfig":"34"},{"size":825,"mtime":1612240531337,"results":"37","hashOfConfig":"34"},{"size":1166,"mtime":1612243243223,"results":"38","hashOfConfig":"34"},{"size":211,"mtime":1612240617942,"results":"39","hashOfConfig":"34"},{"size":473,"mtime":1612241600007,"results":"40","hashOfConfig":"34"},{"size":1331,"mtime":1612243671967,"results":"41","hashOfConfig":"34"},{"size":751,"mtime":1612242069749,"results":"42","hashOfConfig":"34"},{"size":761,"mtime":1612242000192,"results":"43","hashOfConfig":"34"},{"size":740,"mtime":1612242383311,"results":"44","hashOfConfig":"34"},{"size":4105,"mtime":1612245145998,"results":"45","hashOfConfig":"34"},{"size":1537,"mtime":1612243623981,"results":"46","hashOfConfig":"34"},{"size":1686,"mtime":1612243682517,"results":"47","hashOfConfig":"34"},{"size":3776,"mtime":1612243710824,"results":"48","hashOfConfig":"34"},{"size":585,"mtime":1612243738919,"results":"49","hashOfConfig":"34"},{"size":1090,"mtime":1612243781597,"results":"50","hashOfConfig":"34"},{"size":900,"mtime":1612243840332,"results":"51","hashOfConfig":"34"},{"size":2209,"mtime":1612243906219,"results":"52","hashOfConfig":"34"},{"size":580,"mtime":1612244254023,"results":"53","hashOfConfig":"34"},{"size":801,"mtime":1612244536950,"results":"54","hashOfConfig":"34"},{"size":720,"mtime":1612244699368,"results":"55","hashOfConfig":"34"},{"size":2215,"mtime":1612244867100,"results":"56","hashOfConfig":"34"},{"size":1330,"mtime":1612244917141,"results":"57","hashOfConfig":"34"},{"size":1303,"mtime":1612245130760,"results":"58","hashOfConfig":"34"},{"size":1343,"mtime":1612244283533,"results":"59","hashOfConfig":"34"},{"size":546,"mtime":1612244320736,"results":"60","hashOfConfig":"34"},{"size":1277,"mtime":1612244393845,"results":"61","hashOfConfig":"34"},{"size":5009,"mtime":1612244449528,"results":"62","hashOfConfig":"34"},{"size":1021,"mtime":1612244650566,"results":"63","hashOfConfig":"34"},{"size":850,"mtime":1612244619741,"results":"64","hashOfConfig":"34"},{"size":3176,"mtime":1612245066488,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1kmmjm",{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147"},"C:\\oldVersionCalendar\\calendar-ts\\src\\pages\\Landing\\index.tsx",[],"C:\\oldVersionCalendar\\calendar-ts\\src\\pages\\Logout\\index.tsx",[],"C:\\oldVersionCalendar\\calendar-ts\\src\\pages\\Main\\index.tsx",["148","149"],"import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport {\r\n  MainWrapper,\r\n  Calendar,\r\n  Header,\r\n  SideBar,\r\n  Modal,\r\n} from \"../../components\";\r\n\r\nconst Main = ():JSX.Element => {\r\n  const { isAuthenticated } = useSelector((state: any) => state.auth);\r\n  const { isOpenModal } = useSelector((state: any) => state.modal);\r\n  const [isOpenSideBar, setIsOpenSideBar] = React.useState(true);\r\n\r\n  return !isAuthenticated ? (\r\n    <Redirect to=\"/login\" />\r\n  ) : (\r\n    <MainWrapper>\r\n      <Header\r\n        isOpenSideBar={isOpenSideBar}\r\n        setIsOpenSideBar={setIsOpenSideBar}\r\n      />\r\n      <main className=\"main\">\r\n        <div className=\"wrapper\">\r\n          <div className=\"main__wrapper\">\r\n            <SideBar isOpenSideBar={isOpenSideBar} />\r\n            <Calendar />\r\n          </div>\r\n        </div>\r\n      </main>\r\n      {isOpenModal && <Modal />}\r\n    </MainWrapper>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","C:\\oldVersionCalendar\\calendar-ts\\src\\pages\\NotFound\\index.tsx",[],"C:\\oldVersionCalendar\\calendar-ts\\src\\pages\\Login\\index.tsx",["150"],"import React from \"react\";\r\nimport {Redirect, Link} from 'react-router-dom';\r\nimport {useSelector} from 'react-redux';\r\nimport { SignInForm, SignUpForm } from \"../../components\";\r\n\r\nconst Login = (): JSX.Element => {\r\n  const [isSignUpForm, toggleIsSignUpForm] = React.useState(false);\r\n  const [registerUserEmail, setRegisterUserEmail] = React.useState('');\r\n  const isAuthenticated = useSelector((state: any) => state.auth.isAuthenticated);\r\n\r\n  const handleToggleButtonClick = () => {\r\n    toggleIsSignUpForm(!isSignUpForm);\r\n  };\r\n\r\n  return isAuthenticated ? (\r\n    <Redirect exact to='/calendar' />\r\n  ) : (\r\n    <div className=\"login\">\r\n      <div className='wrapper'>\r\n      <div className=\"login__wrapper\">\r\n      <Link to ='/' className=\"button login__button button__add\">landing page</Link>\r\n        {isSignUpForm ? (\r\n          <SignUpForm handleToggleButtonClick={handleToggleButtonClick} setRegisterUserEmail={setRegisterUserEmail}/>\r\n        ) : (\r\n          <SignInForm handleToggleButtonClick={handleToggleButtonClick} registerUserEmail={registerUserEmail}/>\r\n        )}\r\n      </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n\r\n","C:\\oldVersionCalendar\\calendar-ts\\src\\pages\\Loading\\index.tsx",[],"C:\\oldVersionCalendar\\calendar-ts\\src\\redux\\reducers.ts",[],"C:\\oldVersionCalendar\\calendar-ts\\src\\components\\ViewMessageModal\\index.tsx",["151","152"],"C:\\oldVersionCalendar\\calendar-ts\\src\\redux\\users\\usersReducers.ts",[],"C:\\oldVersionCalendar\\calendar-ts\\src\\redux\\modal\\modalReducers.ts",[],"C:\\oldVersionCalendar\\calendar-ts\\src\\redux\\messages\\messagesReducers.ts",["153","154"],"import * as constants from './messagesConstants';\r\nimport isEmpty from '../../services/isEmpty';\r\nimport { IUserMessageData } from './messagesActions';\r\n\r\nexport type InitialStateDataType = {\r\n  isNoMessages: boolean\r\n  isLoadedMessages: boolean\r\n  messages: IUserMessageData[]\r\n};\r\nconst initialState = {\r\n  isNoMessages: false,\r\n  isLoadedMessages: false,\r\n  messages: [],\r\n};\r\n\r\nexport default function messages(state = initialState, action: any):InitialStateDataType {\r\n  switch (action.type) {\r\n    case constants.SET_ALL_MESSAGES:\r\n      return {\r\n        ...state,\r\n        isNoMessages: isEmpty(action.payload),\r\n        isLoadedMessages: true,\r\n        messages: action.payload\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","C:\\oldVersionCalendar\\calendar-ts\\src\\components\\AddUpdateMessageModal\\index.tsx",["155","156","157","158"],"import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport isEmpty from \"../../services/isEmpty\";\r\nimport getDateInFormat from \"../../services/getDateInFormat\";\r\nimport getTimeInFormat from \"../../services/getTimeInFormat\";\r\nimport { requestAllMessages, setCurrentHour, closeModal } from \"../../redux/actions\";\r\nimport { IUserMessageData, IUserMessageDataProps } from \"../../redux/messages/messagesActions\";\r\n\r\nimport * as CONSTANTS from \"../../constants\";\r\n\r\nfunction AddUpdateMessageModal(): JSX.Element {\r\n  const { idSelectedDate, currentHour } = useSelector((store: any) => store.calendar);\r\n  const { email, id, role } = useSelector((store: any) => store.auth.user);\r\n  const { messages } = useSelector((store: any) => store.messages);\r\n  const { modalType } = useSelector((store: any) => store.modal);\r\n  const dispatch = useDispatch();\r\n\r\n  const [stateMessageModal,setStateMessageModal] = React.useState<IUserMessageDataProps>({\r\n    userId: id,\r\n    title: \"\",\r\n    message: \"\",\r\n    currentHour,\r\n    email,\r\n    role,\r\n  });\r\n\r\n  const messagesTargetDay = messages.find((messagesDay: IUserMessageData) => messagesDay.id === idSelectedDate);\r\n  \r\n  React.useEffect(() => {\r\n    if (messagesTargetDay && messagesTargetDay.messages[currentHour]) {\r\n      const targetMessage = messagesTargetDay.messages[currentHour];\r\n      setStateMessageModal(targetMessage);\r\n    }\r\n  }, [currentHour, messagesTargetDay]);\r\n\r\n  const handleInputChange = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\r\n    setStateMessageModal({\r\n      ...stateMessageModal,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  const handleAddUpdateButtonClick = () => {\r\n    if (!isEmpty(stateMessageModal.message)) {\r\n      if (messagesTargetDay) {\r\n        messagesTargetDay.messages[currentHour] = stateMessageModal;\r\n        axios\r\n          .put( `${CONSTANTS.BACKEND_URL}/messages/${idSelectedDate}`, messagesTargetDay)\r\n          .then(() => {\r\n            dispatch(requestAllMessages());\r\n            dispatch(setCurrentHour(null));\r\n            dispatch(closeModal());\r\n          });\r\n      } else {\r\n        const array = new Array(24);\r\n        array[currentHour] = stateMessageModal;\r\n        const data = {\r\n          id: idSelectedDate,\r\n          messages: array,\r\n        };\r\n        axios\r\n          .post(`${CONSTANTS.BACKEND_URL}/messages`, data)\r\n          .then(() => {\r\n            dispatch(requestAllMessages());\r\n            dispatch(setCurrentHour(null));\r\n            dispatch(closeModal());\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"add-update-message-card\">\r\n      <div className=\"add-update-message-card__header\">\r\n        <h3 className=\"add-update-message-card__date\">\r\n          Date: {getDateInFormat(idSelectedDate)} \r\n          <br />\r\n          <br /> \r\n          Time: {getTimeInFormat(currentHour)}\r\n        </h3>\r\n        <h3 className=\"add-update-message-card__author\">{email}</h3>\r\n      </div>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"title\"\r\n        className=\"input add-update-message-card__input\"\r\n        name=\"title\"\r\n        value={stateMessageModal.title}\r\n        onChange={handleInputChange}\r\n      />\r\n      <textarea\r\n        placeholder=\"note\"\r\n        className=\"input add-update-message-card__textarea\"\r\n        name=\"message\"\r\n        value={stateMessageModal.message}\r\n        onChange={handleInputChange}\r\n      />\r\n      <div className=\"add-update-message-card__buttons\">\r\n        {CONSTANTS.MODAL_TYPES.UPDATE === modalType && (\r\n          <button\r\n            className=\"button button__prim\"\r\n            onClick={handleAddUpdateButtonClick}\r\n          >\r\n            update\r\n          </button>\r\n        )}\r\n        {CONSTANTS.MODAL_TYPES.ADD === modalType && (\r\n          <button\r\n            className=\"button button__prim\"\r\n            onClick={handleAddUpdateButtonClick}\r\n          >\r\n            add\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddUpdateMessageModal;\r\n","C:\\oldVersionCalendar\\calendar-ts\\src\\components\\UsersList\\index.tsx",["159","160"],"import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport axios from 'axios';\r\nimport UserItem from \"./UserItem\";\r\nimport * as CONSTANTS from '../../constants';\r\nimport {IGetModelUser} from '../../services/getModelUser';\r\n\r\n\r\nconst UsersList = (): JSX.Element => {\r\n  const {id, role} = useSelector((store:any)=> store.auth.user)\r\n  const [isLoaded, setIsLoaded] =React.useState(false);\r\n  const [listUsers, setListUsers] = React.useState<IGetModelUser[]>([]);\r\n\r\n  React.useEffect(() => {\r\n    // Скорее всего нужно перенести в redux, так как сложно взаимодействовать из UserItem, так как при изменении роли нужно обновить ввесь лист\r\n    if(role === CONSTANTS.BASIC_ROLES.ADMIN){\r\n      axios.get(`${CONSTANTS.BACKEND_URL}/data-users/?id_ne=${id}`)\r\n      .then((res)=>{\r\n        const listUsers = res.data;\r\n        setListUsers(listUsers)\r\n        setIsLoaded(true);\r\n      })\r\n      // .catch((e)=> console.log)\r\n    }\r\n    // dispatch(allUsers());\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"users-list\">\r\n      <h2 className=\"users-list__title border_bottom\">All users</h2>\r\n      {isLoaded ? (\r\n        <ul className=\"users-list__users border_bottom\">\r\n          {listUsers.map((user: IGetModelUser, index: number) => (\r\n            <UserItem key={index} user={user} />\r\n          ))}\r\n        </ul>\r\n      ) : (\r\n        <div>Loading</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UsersList;\r\n\r\n","C:\\oldVersionCalendar\\calendar-ts\\src\\components\\UsersList\\UserItem\\index.tsx",[],"C:\\oldVersionCalendar\\calendar-ts\\src\\components\\SignInForm\\index.tsx",["161","162","163","164"],"C:\\oldVersionCalendar\\calendar-ts\\src\\components\\SideBar\\index.tsx",["165"],"import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport WidgetMonth from '../Calendar/WidgetMonth';\r\nimport UsersList from \"../UsersList\";\r\n\r\nimport { BASIC_ROLES } from '../../constants';\r\nconst SideBar = ({ isOpenSideBar }: { isOpenSideBar: boolean }):JSX.Element => {\r\n  const { role } = useSelector((store: any) => store.auth.user);\r\n\r\n  return (\r\n    <div className={`side-bar ${isOpenSideBar ? \"side-bar_visible\" : \"\"}`}>\r\n      <WidgetMonth />\r\n      {role === BASIC_ROLES.ADMIN ? <UsersList /> : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SideBar;\r\n","C:\\oldVersionCalendar\\calendar-ts\\src\\components\\Modal\\index.tsx",["166"],"import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport AddUpdateMessageModal from \"../AddUpdateMessageModal\";\r\nimport ViewMessageModal from \"../ViewMessageModal\";\r\nimport { closeModal, setCurrentHour } from \"../../redux/actions\";\r\n\r\nimport * as CONSTANTS from \"../../constants\";\r\n\r\nfunction Modal():JSX.Element {\r\n  const { modalType } = useSelector((store: any) => store.modal);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleCloseButtonClick = () => {\r\n    dispatch(setCurrentHour(null));\r\n    dispatch(closeModal());\r\n  };\r\n\r\n  return (\r\n    <div className=\"modal modal_visibility\">\r\n      <div className=\"modal__wrapper\">\r\n        <span\r\n          className=\"modal__close-button\"\r\n          onClick={handleCloseButtonClick}\r\n        ></span>\r\n        {CONSTANTS.MODAL_TYPES.ADD === modalType && <AddUpdateMessageModal />}\r\n        {CONSTANTS.MODAL_TYPES.UPDATE === modalType && <AddUpdateMessageModal />}\r\n        {CONSTANTS.MODAL_TYPES.VIEW === modalType && <ViewMessageModal />}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Modal;\r\n","C:\\oldVersionCalendar\\calendar-ts\\src\\components\\MainWrapper\\index.tsx",["167","168","169","170"],"import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { Loading } from \"../../pages\";\r\nimport { setAllStartDates, setLoaded, requestAllMessages } from \"../../redux/actions\";\r\n\r\nconst MainWrapper = ({ children }: { children: any }): JSX.Element => {\r\n  const { isLoaded } = useSelector((store: any) => store.auth);\r\n  const dispatch = useDispatch();\r\n  const date = new Date();\r\n  const currentDate = new Date(date.getFullYear(), date.getMonth(), date.getDate());\r\n\r\n  React.useEffect((): any => {\r\n    dispatch(setAllStartDates(currentDate));\r\n    dispatch(requestAllMessages());\r\n    // временный фейк-запрос\r\n    setTimeout(() => dispatch(setLoaded(true)), 1000);\r\n    return () => dispatch(setLoaded(false));\r\n  }, []);\r\n\r\n  return <React.Fragment>{isLoaded ? children : <Loading />}</React.Fragment>;\r\n};\r\n\r\nexport default MainWrapper;\r\n","C:\\oldVersionCalendar\\calendar-ts\\src\\components\\Header\\index.tsx",["171","172"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport { updateDataMonth, updateSelectedDate } from \"../../redux/actions\";\r\nimport MonthToggle from \"../Calendar/MonthToggle\";\r\n\r\nimport * as CONSTANTS from \"../../constants\";\r\n\r\ninterface IHeaderProps {\r\n  isOpenSideBar: boolean;\r\n  setIsOpenSideBar: React.Dispatch<boolean>;\r\n}\r\n\r\nconst Header = ({ isOpenSideBar, setIsOpenSideBar }: IHeaderProps):JSX.Element => {\r\n  const dispatch = useDispatch();\r\n  const { basicDate, currentDate } = useSelector((store: any) => store.calendar);\r\n  const { email } = useSelector((store: any) => store.auth.user);\r\n\r\n  const handleCurrentDateButtonClick = () => {\r\n    dispatch(updateSelectedDate(currentDate));\r\n    dispatch(updateDataMonth(currentDate));\r\n  };\r\n  \r\n  const handleToggleAsideButtonClick = () => {\r\n    setIsOpenSideBar(!isOpenSideBar);\r\n  };\r\n\r\n  return (\r\n    <header className=\"header border_bottom\">\r\n      <div className=\"wrapper\">\r\n        <div className=\"header__wrapper\">\r\n          <div className=\"header__group\">\r\n            <span className=\"hamburger\" onClick={handleToggleAsideButtonClick}>\r\n              <span className=\"hamburger__line\"></span>\r\n            </span>\r\n            <h2 className=\"header__email\">{email}</h2>\r\n            <MonthToggle />\r\n            <h2 className=\"header__date\">\r\n              {CONSTANTS.MONTH_NAMES[basicDate.getMonth()]}{\" \"}\r\n              {basicDate.getFullYear()}\r\n            </h2>\r\n            <Link to=\"/calendar\" className=\"button header__button button__add\">\r\n              Calendar\r\n            </Link>\r\n            <Link to=\"/calendar/segment\" className=\"button header__button button__add\">\r\n              All notes\r\n            </Link>\r\n            <Link\r\n              to=\"/calendar/day\"\r\n              className=\"button header__button button__add\"\r\n              onClick={handleCurrentDateButtonClick}\r\n            >\r\n              Today\r\n            </Link>\r\n          </div>\r\n\r\n          <Link to=\"/logout\" className=\"button button__add\">\r\n            logout\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","C:\\oldVersionCalendar\\calendar-ts\\src\\components\\Calendar\\index.tsx",[],"C:\\oldVersionCalendar\\calendar-ts\\src\\components\\Calendar\\Segment\\SegmentGroup\\index.tsx",[],"C:\\oldVersionCalendar\\calendar-ts\\src\\components\\Calendar\\Month\\WeekOfTheMonth\\index.tsx",["173"],"C:\\oldVersionCalendar\\calendar-ts\\src\\components\\Calendar\\Month\\DayOfTheWeek\\index.tsx",["174","175","176","177","178"],"import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RouteComponentProps, withRouter, useRouteMatch } from \"react-router-dom\";\r\n\r\nimport { updateSelectedDate } from \"../../../../redux/actions\";\r\nimport { InitialStateDataType } from \"../../../../redux/calendar/calendarReducers\";\r\nimport getTimeInFormat from \"../../../../services/getTimeInFormat\";\r\n\r\nexport interface DayOfTheWeekPropsType extends RouteComponentProps<any> {\r\n  dayData: InitialStateDataType;\r\n}\r\n\r\nconst DayOfTheWeek = ({ history, dayData: { date, isCurrentMonth }}: DayOfTheWeekPropsType): JSX.Element => {\r\n  const { messages } = useSelector((store: any) => store.messages);\r\n  const dispatch = useDispatch();\r\n  const { path } = useRouteMatch();\r\n  const [localStorage, setLocalStorage] = React.useState([]);\r\n\r\n  React.useEffect(() => {\r\n    setLocalStorage([]);\r\n    const messagesDay = messages.find((el: any) => el.id === date.getTime());\r\n    const firstThreeMessagesDay = messagesDay && messagesDay.messages.filter((el: any) => el !== null).slice(0, 3);\r\n    if (firstThreeMessagesDay) setLocalStorage(firstThreeMessagesDay);\r\n  }, [date, messages]);\r\n\r\n  const handleSelectedDateClick = () => {\r\n    dispatch(updateSelectedDate(date));\r\n    history.push(`${path}/day`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"month-list__day\">\r\n      <div\r\n        className={`month-list__day-header ${\r\n          isCurrentMonth\r\n            ? \"month-list__day-header_current\"\r\n            : \"month-list__day-header_other\"\r\n        }`}\r\n        onClick={handleSelectedDateClick}\r\n      >\r\n        <div className=\"month-list__day-number\">{date.getDate()}</div>\r\n      </div>\r\n      <ul className=\"month-list__day-tasks\">\r\n        {localStorage.map(\r\n          (el: any, index: number) =>\r\n            el && (\r\n              <li key={index} className=\"month-list__day-task\">\r\n                <h3 className=\"month-list__day-task-time\">\r\n                  {getTimeInFormat(el.currentHour)}\r\n                </h3>\r\n                <p className=\"month-list__day-task-text\">{el.message}</p>\r\n              </li>\r\n            )\r\n        )}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(DayOfTheWeek);\r\n","C:\\oldVersionCalendar\\calendar-ts\\src\\components\\Calendar\\Day\\index.tsx",["179","180","181"],"import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport CardMessage from \"../CardMessage\";\r\nimport { IUserMessageData } from \"../../../redux/messages/messagesActions\";\r\nimport CardEmpty from \"../CardEmpty\";\r\n\r\nconst Day = (): JSX.Element => {\r\n  const { idSelectedDate, selectedDate } = useSelector((store: any) => store.calendar);\r\n  const { messages } = useSelector((store: any) => store.messages);\r\n  const messagesTargetDay = messages.find((messagesDay: IUserMessageData) => messagesDay.id === idSelectedDate);\r\n\r\n  return (\r\n    <div className=\"day-list\">\r\n      <div className=\"day-list__header border_bottom\">\r\n        <div className=\"day-list__day-name\">\r\n          <span>{selectedDate.getDate()}</span>\r\n        </div>\r\n      </div>\r\n      <div className=\"day-list__group\">\r\n        {messagesTargetDay &&\r\n          messagesTargetDay.messages.map((message: any, index: number) =>\r\n            message ? (\r\n              <CardMessage key={index} message={message} />\r\n            ) : (\r\n              <CardEmpty key={index} currentHour={index} />\r\n            )\r\n          )}\r\n\r\n        {!messagesTargetDay &&\r\n          Array(24)\r\n            .fill(null)\r\n            .map((el, index) => <CardEmpty key={index} currentHour={index} />)}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Day;\r\n","C:\\oldVersionCalendar\\calendar-ts\\src\\components\\Calendar\\CardEmpty\\index.tsx",["182"],"import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { openModal, setCurrentHour } from \"../../../redux/actions\";\r\nimport getTimeInFormat from \"../../../services/getTimeInFormat\";\r\nimport { IUserMessageDataProps } from \"../../../redux/messages/messagesActions\";\r\n\r\nimport * as CONSTANTS from \"../../../constants\";\r\n\r\nexport interface ICardMessageProps {\r\n  message: IUserMessageDataProps;\r\n}\r\n\r\nconst CardEmpty = ({ currentHour }: { currentHour: number }): JSX.Element => {\r\n  const { role } = useSelector((store: any) => store.auth.user);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleOpenModalClick = () => {\r\n    dispatch(setCurrentHour(currentHour));\r\n    dispatch(openModal(CONSTANTS.MODAL_TYPES.ADD));\r\n  };\r\n\r\n  return (\r\n    <div className=\"card-message border_bottom\">\r\n      <h3 className=\"card-message__time\">{getTimeInFormat(currentHour)}</h3>\r\n      <div className=\"card-message__message\">Add note...</div>\r\n      <div className=\"card-message__buttons\">\r\n        {CONSTANTS.BASIC_ROLES.VIEWER !== role && (\r\n          <button\r\n            className=\"button button__prim\"\r\n            onClick={handleOpenModalClick}\r\n          >\r\n            Add\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardEmpty;\r\n","C:\\oldVersionCalendar\\calendar-ts\\src\\components\\Calendar\\WidgetMonth\\index.tsx",["183"],"import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport { InitialStateDataType } from \"../../../redux/calendar/calendarReducers\";\r\nimport WidgetWeekOfTheMonth from \"./WidgetWeekOfTheMonth\";\r\nimport MonthToggle from \"../MonthToggle\";\r\n\r\nimport * as CONSTANTS from \"../../../constants\";\r\n\r\nconst WidgetMonth = (): JSX.Element => {\r\n  const { basicDate, data } = useSelector((store: any) => store.calendar);\r\n\r\n  return (\r\n    <div className=\"widget-month border_bottom\">\r\n      <div className=\"widget-month__header border_bottom\">\r\n        <h3 className=\"widget-month__date\">\r\n          {CONSTANTS.MONTH_NAMES[basicDate.getMonth()]}\r\n          {basicDate.getFullYear()}\r\n        </h3>\r\n        <MonthToggle />\r\n      </div>\r\n      <div className=\"widget-month__list border_bottom\">\r\n        <div className=\"widget-month__list-header\">\r\n          {CONSTANTS.WEEK_DAY_NAMES.map((name, index) => (\r\n            <span key={index} className=\"widget-month__day-name\">\r\n              {name}\r\n            </span>\r\n          ))}\r\n        </div>\r\n        {data.map((week: InitialStateDataType[], index: number) => (\r\n          <WidgetWeekOfTheMonth\r\n            key={index}\r\n            weekData={week}\r\n            weekNumber={index}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WidgetMonth;\r\n","C:\\oldVersionCalendar\\calendar-ts\\src\\components\\Calendar\\WidgetMonth\\WidgetWeekOfTheMonth\\index.tsx",[],"C:\\oldVersionCalendar\\calendar-ts\\src\\components\\Calendar\\WidgetMonth\\WidgetDayOfTheWeek\\index.tsx",["184"],"import React from \"react\";\r\nimport { withRouter, useRouteMatch } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport { DayOfTheWeekPropsType } from \"../../Month/DayOfTheWeek\";\r\nimport { updateSelectedDate } from \"../../../../redux/actions\";\r\n\r\nconst WidgetDayOfTheWeek = ({ history, dayData: { date, isCurrentMonth } }: DayOfTheWeekPropsType): JSX.Element => {\r\n  const { path } = useRouteMatch();\r\n  const dispatch = useDispatch();\r\n  const { selectedDate, currentDate } = useSelector((store: any) => store.calendar);\r\n\r\n  const isCurrentDate = currentDate.getTime() === date.getTime();\r\n  const isSelectedDate = selectedDate && selectedDate.getTime() === date.getTime();\r\n  \r\n  const handleSelectedDateClick =()=>{\r\n    dispatch(updateSelectedDate(date))\r\n    history.push(`${path}/day`);\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={`widget-month__day \r\n      ${!isCurrentMonth ? \"widget-month__day_shadowed\" : \"\"} \r\n      ${isCurrentDate ? \"widget-month__day_current\" : \"\"}\r\n      ${isSelectedDate ? \"widget-month__day_selected\" : \"\"}`}\r\n      onClick={handleSelectedDateClick}\r\n    >\r\n      <span className=\"widget-month__day__number\">{date.getDate()}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(WidgetDayOfTheWeek);","C:\\oldVersionCalendar\\calendar-ts\\src\\components\\Calendar\\Segment\\index.tsx",["185"],"import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport SegmentGroup, { IGroupProps } from \"./SegmentGroup\";\r\nimport verificationFilterInput from \"../../../services/verificationFilterInput\";\r\nimport getDateInFormat from '../../../services/getDateInFormat';\r\nimport validationFilterForm, {IValidationFilterFormErrors, IValidationFilterFormProps } from \"../../../services/validationFilterForm\";\r\nimport { IUserMessageData } from \"../../../redux/messages/messagesActions\";\r\n\r\nconst Segment = (): JSX.Element => {\r\n  const { isNoMessages, messages } = useSelector((store: any) => store.messages);\r\n  const [messagesLocalStorage, setMessagesLocalStorage] = React.useState(messages);\r\n\r\n  const [errorsFilter, setErrorsFilter] = React.useState<IValidationFilterFormErrors>({});\r\n  const [paramsFilter, setParamFilter] = React.useState<IValidationFilterFormProps>({\r\n    startParam: \"\",\r\n    endParam: \"\",\r\n  });\r\n  \r\n  React.useEffect(()=>{\r\n    setMessagesLocalStorage(messages);\r\n  },[messages])\r\n\r\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setParamFilter({\r\n      ...paramsFilter,\r\n      [event.target.name]: verificationFilterInput(event.target.value)\r\n    })\r\n    setErrorsFilter({\r\n      ...errorsFilter,\r\n      [event.target.name]:'',\r\n      worning:''\r\n    })\r\n  };\r\n\r\n  const handleSubmitForm = (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n    const { isValid, errors } = validationFilterForm(paramsFilter);\r\n    if(isValid){\r\n      const arrayStartParam = paramsFilter.startParam.split('/');\r\n      const arrayEndParam = paramsFilter.endParam.split('/');\r\n      let indexStartParam = new Date(+arrayStartParam[2], +arrayStartParam[1]-1 ,+arrayStartParam[0]).getTime();\r\n      let indexEndParam = new Date(+arrayEndParam[2], +arrayEndParam[1]-1 ,+arrayEndParam[0]).getTime();\r\n\r\n      if(indexStartParam < indexEndParam){\r\n        [indexStartParam, indexEndParam] = [indexEndParam, indexStartParam];\r\n        setParamFilter({\r\n          ...paramsFilter,\r\n          startParam: paramsFilter.endParam,\r\n          endParam: paramsFilter.startParam\r\n        })\r\n        setErrorsFilter({\r\n          ...errorsFilter,\r\n          worning:'Dates are swapped'\r\n        });\r\n      }\r\n      const filteredData = messages.filter((el:IUserMessageData)=>  el.id <= indexStartParam && el.id >= indexEndParam);\r\n      setMessagesLocalStorage(filteredData)\r\n    }else{\r\n      setErrorsFilter(errors);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"segment\">\r\n      <div className=\"segment__header border_bottom\">\r\n      {/* возможно нужно вынести filter в отдельный компонент ??? */}\r\n      <h2 className=\"segment__header-title\">\r\n        {messagesLocalStorage.length > 1  && `Notes from ${getDateInFormat(messagesLocalStorage[0].id)} to ${getDateInFormat(messagesLocalStorage[messagesLocalStorage.length-1].id)}`}\r\n        {messagesLocalStorage.length === 1  && `Notes for the ${getDateInFormat(messagesLocalStorage[0].id)}`}\r\n        {messagesLocalStorage.length === 0  && `No notes`}\r\n        </h2>\r\n        {!isNoMessages && (\r\n          <form className=\"filter-messages-form\" onSubmit={handleSubmitForm}>\r\n              <div className=\"filter-messages-form__worning-feedback\">\r\n                {errorsFilter.worning && errorsFilter.worning}\r\n              </div>\r\n               <div className=\"filter-messages-form__wrapper\">\r\n               <div className=\"filter-messages-form__group\">\r\n              <input\r\n                className=\"filter-messages-form__input\"\r\n                type=\"text\"\r\n                name=\"startParam\"\r\n                value={paramsFilter.startParam}\r\n                onChange={handleInputChange}\r\n                placeholder='dd/mm/yyyy'\r\n              />\r\n              <div className=\"filter-messages-form__error-feedback\">\r\n                {errorsFilter.startParam && errorsFilter.startParam}\r\n              </div>\r\n            </div>\r\n            <div className=\"filter-messages-form__group\">\r\n              <input\r\n                className=\"filter-messages-form__input\"\r\n                type=\"text\"\r\n                name=\"endParam\"\r\n                value={paramsFilter.endParam}\r\n                onChange={handleInputChange}\r\n                placeholder='dd/mm/yyyy'\r\n              />\r\n              <div className=\"filter-messages-form__error-feedback\">\r\n\r\n                {errorsFilter.endParam && errorsFilter.endParam}\r\n              </div>\r\n            </div>\r\n               </div>\r\n               <button className=\"button button__prim filter-messages-form__button\">filter</button>\r\n          </form>\r\n        )}\r\n      </div>\r\n      {!isNoMessages && messagesLocalStorage && (\r\n        <React.Fragment>\r\n          {messagesLocalStorage.map((group: IGroupProps, index: number) => (\r\n            <SegmentGroup key={index} group={group} index={index} />\r\n          ))}\r\n        </React.Fragment>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Segment;\r\n","C:\\oldVersionCalendar\\calendar-ts\\src\\components\\Calendar\\MonthToggle\\index.tsx",["186"],"import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport { updateDataMonth } from \"../../../redux/actions\";\r\n\r\nconst MonthToggle = (): JSX.Element => {\r\n  const dispatch = useDispatch();\r\n  const { basicDate } = useSelector((store: any) => store.calendar);\r\n\r\n  const handlePrevMonthButtonClick = () => {\r\n    const date = new Date(basicDate.getFullYear(), basicDate.getMonth() - 1);\r\n    dispatch(updateDataMonth(date));\r\n  };\r\n\r\n  const handleNextMonthButtonClick = () => {\r\n    const date = new Date(basicDate.getFullYear(), basicDate.getMonth() + 1);\r\n    dispatch(updateDataMonth(date));\r\n  };\r\n\r\n  return (\r\n    <div className=\"month-toggle\">\r\n      <button\r\n        className=\"month-toggle__button\"\r\n        onClick={handlePrevMonthButtonClick}\r\n      >\r\n        ❮\r\n      </button>\r\n      <button\r\n        className=\"month-toggle__button\"\r\n        onClick={handleNextMonthButtonClick}\r\n      >\r\n        ❯\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\nexport default MonthToggle;\r\n","C:\\oldVersionCalendar\\calendar-ts\\src\\components\\Calendar\\Month\\index.tsx",["187"],"import React from \"react\";\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { InitialStateDataType } from \"../../../redux/calendar/calendarReducers\";\r\nimport WeekOfTheMonth from './WeekOfTheMonth';\r\n\r\nimport * as CONSTANTS from \"../../../constants\";\r\nconst Month = (): JSX.Element => {\r\n  const { data } = useSelector((store: any) => store.calendar);\r\n  \r\n  return (\r\n    <div className=\"month-list\">\r\n      <div className=\"month-list__header border_bottom\">\r\n        {CONSTANTS.WEEK_DAY_NAMES.map((name, index) => (\r\n          <span key={index} className=\"month-list__day-name\">\r\n            {name}\r\n          </span>\r\n        ))}\r\n      </div>\r\n      {data.map((week: InitialStateDataType[], index: number) => (\r\n        <WeekOfTheMonth key={index} weekData={week} weekNumber={index} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\nexport default Month;\r\n","C:\\oldVersionCalendar\\calendar-ts\\src\\components\\Calendar\\CardMessage\\index.tsx",["188","189","190","191","192","193"],"import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport axios from \"axios\";\r\n\r\nimport isEmpty from \"../../../services/isEmpty\";\r\nimport { openModal, setCurrentHour, updateSelectedDate } from \"../../../redux/actions\";\r\nimport getTimeInFormat from \"../../../services/getTimeInFormat\";\r\nimport { IUserMessageDataProps, requestAllMessages } from \"../../../redux/messages/messagesActions\";\r\n\r\nimport * as CONSTANTS from \"../../../constants\";\r\n\r\nexport interface ICardMessageProps {\r\n  message: IUserMessageDataProps;\r\n  groupId?: number;\r\n}\r\nconst CardMessage = ({ groupId, message: { message, email, currentHour, role, userId }}: ICardMessageProps): JSX.Element => {\r\n  const { id } = useSelector((store: any) => store.auth.user);\r\n  const roleCurrentUser = useSelector((store: any) => store.auth.user.role);\r\n  const { messages } = useSelector((store: any) => store.messages);\r\n  const { idSelectedDate } = useSelector((store: any) => store.calendar);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleOpenModalClick = (modalType: string) => {\r\n    if (groupId) {\r\n      const date = new Date(groupId);\r\n      dispatch(updateSelectedDate(date));\r\n    }\r\n    dispatch(setCurrentHour(currentHour));\r\n    dispatch(openModal(modalType));\r\n  };\r\n\r\n  const handleRemoveButtonClick = () => {\r\n    const currentId = groupId || idSelectedDate;\r\n    const messagesTargetDay = messages.find((el: any) => el.id === currentId);\r\n    messagesTargetDay.messages[currentHour] = null;\r\n    const isMessages = !isEmpty(messagesTargetDay.messages.filter((el: any) => el));\r\n    if (isMessages) {\r\n      axios\r\n        .put(`${CONSTANTS.BACKEND_URL}/messages/${currentId}`, messagesTargetDay)\r\n        .then(() => {\r\n          dispatch(requestAllMessages());\r\n        });\r\n    } else {\r\n      axios\r\n        .delete(`${CONSTANTS.BACKEND_URL}/messages/${currentId}`)\r\n        .then(() => {\r\n          dispatch(requestAllMessages());\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"card-message border_bottom\">\r\n      <h3 className=\"card-message__time\">{getTimeInFormat(currentHour)}</h3>\r\n      <div className={`card-message__marker card-message__marker_${role}`}>\r\n        {role[0]}\r\n      </div>\r\n      <h4 className=\"card-message__email\">{email}</h4>\r\n      <div className=\"card-message__message\">{message}</div>\r\n      <div className=\"card-message__buttons\">\r\n        <button\r\n          className=\"button button__prim\"\r\n          onClick={() => handleOpenModalClick(CONSTANTS.MODAL_TYPES.VIEW)}\r\n        >\r\n          View\r\n        </button>\r\n        {id === userId && CONSTANTS.BASIC_ROLES.VIEWER !== roleCurrentUser && (\r\n          <React.Fragment>\r\n            <button\r\n              className=\"button button__prim\"\r\n              onClick={() => handleOpenModalClick(CONSTANTS.MODAL_TYPES.UPDATE)}\r\n            >\r\n              Update\r\n            </button>\r\n            <button\r\n              className=\"button button__prim\"\r\n              onClick={handleRemoveButtonClick}\r\n            >\r\n              Remove\r\n            </button>\r\n          </React.Fragment>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardMessage;\r\n",{"ruleId":"194","severity":1,"message":"195","line":13,"column":51,"nodeType":"196","messageId":"197","endLine":13,"endColumn":54,"suggestions":"198"},{"ruleId":"194","severity":1,"message":"195","line":14,"column":47,"nodeType":"196","messageId":"197","endLine":14,"endColumn":50,"suggestions":"199"},{"ruleId":"194","severity":1,"message":"195","line":9,"column":47,"nodeType":"196","messageId":"197","endLine":9,"endColumn":50,"suggestions":"200"},{"ruleId":"194","severity":1,"message":"195","line":9,"column":63,"nodeType":"196","messageId":"197","endLine":9,"endColumn":66,"suggestions":"201"},{"ruleId":"194","severity":1,"message":"195","line":10,"column":44,"nodeType":"196","messageId":"197","endLine":10,"endColumn":47,"suggestions":"202"},{"ruleId":"203","severity":1,"message":"204","line":16,"column":56,"nodeType":"205","messageId":"206","endLine":16,"endColumn":67},{"ruleId":"194","severity":1,"message":"195","line":16,"column":64,"nodeType":"196","messageId":"197","endLine":16,"endColumn":67,"suggestions":"207"},{"ruleId":"194","severity":1,"message":"195","line":14,"column":63,"nodeType":"196","messageId":"197","endLine":14,"endColumn":66,"suggestions":"208"},{"ruleId":"194","severity":1,"message":"195","line":15,"column":51,"nodeType":"196","messageId":"197","endLine":15,"endColumn":54,"suggestions":"209"},{"ruleId":"194","severity":1,"message":"195","line":16,"column":44,"nodeType":"196","messageId":"197","endLine":16,"endColumn":47,"suggestions":"210"},{"ruleId":"194","severity":1,"message":"195","line":17,"column":45,"nodeType":"196","messageId":"197","endLine":17,"endColumn":48,"suggestions":"211"},{"ruleId":"194","severity":1,"message":"195","line":10,"column":41,"nodeType":"196","messageId":"197","endLine":10,"endColumn":44,"suggestions":"212"},{"ruleId":"213","severity":1,"message":"214","line":26,"column":6,"nodeType":"215","endLine":26,"endColumn":8,"suggestions":"216"},{"ruleId":"213","severity":1,"message":"217","line":36,"column":5,"nodeType":"215","endLine":36,"endColumn":24,"suggestions":"218"},{"ruleId":"194","severity":1,"message":"195","line":45,"column":21,"nodeType":"196","messageId":"197","endLine":45,"endColumn":24,"suggestions":"219"},{"ruleId":"194","severity":1,"message":"195","line":53,"column":25,"nodeType":"196","messageId":"197","endLine":53,"endColumn":28,"suggestions":"220"},{"ruleId":"194","severity":1,"message":"195","line":56,"column":22,"nodeType":"196","messageId":"197","endLine":56,"endColumn":25,"suggestions":"221"},{"ruleId":"194","severity":1,"message":"195","line":9,"column":40,"nodeType":"196","messageId":"197","endLine":9,"endColumn":43,"suggestions":"222"},{"ruleId":"194","severity":1,"message":"195","line":11,"column":45,"nodeType":"196","messageId":"197","endLine":11,"endColumn":48,"suggestions":"223"},{"ruleId":"194","severity":1,"message":"195","line":7,"column":48,"nodeType":"196","messageId":"197","endLine":7,"endColumn":51,"suggestions":"224"},{"ruleId":"194","severity":1,"message":"195","line":8,"column":44,"nodeType":"196","messageId":"197","endLine":8,"endColumn":47,"suggestions":"225"},{"ruleId":"194","severity":1,"message":"195","line":13,"column":23,"nodeType":"196","messageId":"197","endLine":13,"endColumn":26,"suggestions":"226"},{"ruleId":"213","severity":1,"message":"227","line":19,"column":6,"nodeType":"215","endLine":19,"endColumn":8,"suggestions":"228"},{"ruleId":"194","severity":1,"message":"195","line":17,"column":58,"nodeType":"196","messageId":"197","endLine":17,"endColumn":61,"suggestions":"229"},{"ruleId":"194","severity":1,"message":"195","line":18,"column":41,"nodeType":"196","messageId":"197","endLine":18,"endColumn":44,"suggestions":"230"},{"ruleId":"194","severity":1,"message":"195","line":7,"column":70,"nodeType":"196","messageId":"197","endLine":7,"endColumn":73,"suggestions":"231"},{"ruleId":"194","severity":1,"message":"195","line":9,"column":68,"nodeType":"196","messageId":"197","endLine":9,"endColumn":71,"suggestions":"232"},{"ruleId":"194","severity":1,"message":"195","line":14,"column":44,"nodeType":"196","messageId":"197","endLine":14,"endColumn":47,"suggestions":"233"},{"ruleId":"194","severity":1,"message":"195","line":21,"column":44,"nodeType":"196","messageId":"197","endLine":21,"endColumn":47,"suggestions":"234"},{"ruleId":"194","severity":1,"message":"195","line":22,"column":83,"nodeType":"196","messageId":"197","endLine":22,"endColumn":86,"suggestions":"235"},{"ruleId":"194","severity":1,"message":"195","line":45,"column":16,"nodeType":"196","messageId":"197","endLine":45,"endColumn":19,"suggestions":"236"},{"ruleId":"194","severity":1,"message":"195","line":9,"column":64,"nodeType":"196","messageId":"197","endLine":9,"endColumn":67,"suggestions":"237"},{"ruleId":"194","severity":1,"message":"195","line":10,"column":44,"nodeType":"196","messageId":"197","endLine":10,"endColumn":47,"suggestions":"238"},{"ruleId":"194","severity":1,"message":"195","line":22,"column":52,"nodeType":"196","messageId":"197","endLine":22,"endColumn":55,"suggestions":"239"},{"ruleId":"194","severity":1,"message":"195","line":15,"column":40,"nodeType":"196","messageId":"197","endLine":15,"endColumn":43,"suggestions":"240"},{"ruleId":"194","severity":1,"message":"195","line":11,"column":51,"nodeType":"196","messageId":"197","endLine":11,"endColumn":54,"suggestions":"241"},{"ruleId":"194","severity":1,"message":"195","line":11,"column":61,"nodeType":"196","messageId":"197","endLine":11,"endColumn":64,"suggestions":"242"},{"ruleId":"194","severity":1,"message":"195","line":11,"column":58,"nodeType":"196","messageId":"197","endLine":11,"endColumn":61,"suggestions":"243"},{"ruleId":"194","severity":1,"message":"195","line":8,"column":45,"nodeType":"196","messageId":"197","endLine":8,"endColumn":48,"suggestions":"244"},{"ruleId":"194","severity":1,"message":"195","line":9,"column":40,"nodeType":"196","messageId":"197","endLine":9,"endColumn":43,"suggestions":"245"},{"ruleId":"194","severity":1,"message":"195","line":17,"column":38,"nodeType":"196","messageId":"197","endLine":17,"endColumn":41,"suggestions":"246"},{"ruleId":"194","severity":1,"message":"195","line":18,"column":47,"nodeType":"196","messageId":"197","endLine":18,"endColumn":50,"suggestions":"247"},{"ruleId":"194","severity":1,"message":"195","line":19,"column":44,"nodeType":"196","messageId":"197","endLine":19,"endColumn":47,"suggestions":"248"},{"ruleId":"194","severity":1,"message":"195","line":20,"column":50,"nodeType":"196","messageId":"197","endLine":20,"endColumn":53,"suggestions":"249"},{"ruleId":"194","severity":1,"message":"195","line":34,"column":50,"nodeType":"196","messageId":"197","endLine":34,"endColumn":53,"suggestions":"250"},{"ruleId":"194","severity":1,"message":"195","line":36,"column":72,"nodeType":"196","messageId":"197","endLine":36,"endColumn":75,"suggestions":"251"},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["252","253"],["254","255"],["256","257"],["258","259"],["260","261"],"@typescript-eslint/explicit-module-boundary-types","Argument 'action' should be typed with a non-any type.","Identifier","anyTypedArg",["262","263"],["264","265"],["266","267"],["268","269"],["270","271"],["272","273"],"react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'id' and 'role'. Either include them or remove the dependency array.","ArrayExpression",["274"],"React Hook React.useEffect has a missing dependency: 'stateForm'. Either include it or remove the dependency array. You can also do a functional update 'setStateForm(s => ...)' if you only need 'stateForm' in the 'setStateForm' call.",["275"],["276","277"],["278","279"],["280","281"],["282","283"],["284","285"],["286","287"],["288","289"],["290","291"],"React Hook React.useEffect has missing dependencies: 'currentDate' and 'dispatch'. Either include them or remove the dependency array.",["292"],["293","294"],["295","296"],["297","298"],["299","300"],["301","302"],["303","304"],["305","306"],["307","308"],["309","310"],["311","312"],["313","314"],["315","316"],["317","318"],["319","320"],["321","322"],["323","324"],["325","326"],["327","328"],["329","330"],["331","332"],["333","334"],["335","336"],["337","338"],{"messageId":"339","fix":"340","desc":"341"},{"messageId":"342","fix":"343","desc":"344"},{"messageId":"339","fix":"345","desc":"341"},{"messageId":"342","fix":"346","desc":"344"},{"messageId":"339","fix":"347","desc":"341"},{"messageId":"342","fix":"348","desc":"344"},{"messageId":"339","fix":"349","desc":"341"},{"messageId":"342","fix":"350","desc":"344"},{"messageId":"339","fix":"351","desc":"341"},{"messageId":"342","fix":"352","desc":"344"},{"messageId":"339","fix":"353","desc":"341"},{"messageId":"342","fix":"354","desc":"344"},{"messageId":"339","fix":"355","desc":"341"},{"messageId":"342","fix":"356","desc":"344"},{"messageId":"339","fix":"357","desc":"341"},{"messageId":"342","fix":"358","desc":"344"},{"messageId":"339","fix":"359","desc":"341"},{"messageId":"342","fix":"360","desc":"344"},{"messageId":"339","fix":"361","desc":"341"},{"messageId":"342","fix":"362","desc":"344"},{"messageId":"339","fix":"363","desc":"341"},{"messageId":"342","fix":"364","desc":"344"},{"desc":"365","fix":"366"},{"desc":"367","fix":"368"},{"messageId":"339","fix":"369","desc":"341"},{"messageId":"342","fix":"370","desc":"344"},{"messageId":"339","fix":"371","desc":"341"},{"messageId":"342","fix":"372","desc":"344"},{"messageId":"339","fix":"373","desc":"341"},{"messageId":"342","fix":"374","desc":"344"},{"messageId":"339","fix":"375","desc":"341"},{"messageId":"342","fix":"376","desc":"344"},{"messageId":"339","fix":"377","desc":"341"},{"messageId":"342","fix":"378","desc":"344"},{"messageId":"339","fix":"379","desc":"341"},{"messageId":"342","fix":"380","desc":"344"},{"messageId":"339","fix":"381","desc":"341"},{"messageId":"342","fix":"382","desc":"344"},{"messageId":"339","fix":"383","desc":"341"},{"messageId":"342","fix":"384","desc":"344"},{"desc":"385","fix":"386"},{"messageId":"339","fix":"387","desc":"341"},{"messageId":"342","fix":"388","desc":"344"},{"messageId":"339","fix":"389","desc":"341"},{"messageId":"342","fix":"390","desc":"344"},{"messageId":"339","fix":"391","desc":"341"},{"messageId":"342","fix":"392","desc":"344"},{"messageId":"339","fix":"393","desc":"341"},{"messageId":"342","fix":"394","desc":"344"},{"messageId":"339","fix":"395","desc":"341"},{"messageId":"342","fix":"396","desc":"344"},{"messageId":"339","fix":"397","desc":"341"},{"messageId":"342","fix":"398","desc":"344"},{"messageId":"339","fix":"399","desc":"341"},{"messageId":"342","fix":"400","desc":"344"},{"messageId":"339","fix":"401","desc":"341"},{"messageId":"342","fix":"402","desc":"344"},{"messageId":"339","fix":"403","desc":"341"},{"messageId":"342","fix":"404","desc":"344"},{"messageId":"339","fix":"405","desc":"341"},{"messageId":"342","fix":"406","desc":"344"},{"messageId":"339","fix":"407","desc":"341"},{"messageId":"342","fix":"408","desc":"344"},{"messageId":"339","fix":"409","desc":"341"},{"messageId":"342","fix":"410","desc":"344"},{"messageId":"339","fix":"411","desc":"341"},{"messageId":"342","fix":"412","desc":"344"},{"messageId":"339","fix":"413","desc":"341"},{"messageId":"342","fix":"414","desc":"344"},{"messageId":"339","fix":"415","desc":"341"},{"messageId":"342","fix":"416","desc":"344"},{"messageId":"339","fix":"417","desc":"341"},{"messageId":"342","fix":"418","desc":"344"},{"messageId":"339","fix":"419","desc":"341"},{"messageId":"342","fix":"420","desc":"344"},{"messageId":"339","fix":"421","desc":"341"},{"messageId":"342","fix":"422","desc":"344"},{"messageId":"339","fix":"423","desc":"341"},{"messageId":"342","fix":"424","desc":"344"},{"messageId":"339","fix":"425","desc":"341"},{"messageId":"342","fix":"426","desc":"344"},{"messageId":"339","fix":"427","desc":"341"},{"messageId":"342","fix":"428","desc":"344"},{"messageId":"339","fix":"429","desc":"341"},{"messageId":"342","fix":"430","desc":"344"},{"messageId":"339","fix":"431","desc":"341"},{"messageId":"342","fix":"432","desc":"344"},"suggestUnknown",{"range":"433","text":"434"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"433","text":"435"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"436","text":"434"},{"range":"436","text":"435"},{"range":"437","text":"434"},{"range":"437","text":"435"},{"range":"438","text":"434"},{"range":"438","text":"435"},{"range":"439","text":"434"},{"range":"439","text":"435"},{"range":"440","text":"434"},{"range":"440","text":"435"},{"range":"441","text":"434"},{"range":"441","text":"435"},{"range":"442","text":"434"},{"range":"442","text":"435"},{"range":"443","text":"434"},{"range":"443","text":"435"},{"range":"444","text":"434"},{"range":"444","text":"435"},{"range":"445","text":"434"},{"range":"445","text":"435"},"Update the dependencies array to be: [id, role]",{"range":"446","text":"447"},"Update the dependencies array to be: [registerUserEmail, stateForm]",{"range":"448","text":"449"},{"range":"450","text":"434"},{"range":"450","text":"435"},{"range":"451","text":"434"},{"range":"451","text":"435"},{"range":"452","text":"434"},{"range":"452","text":"435"},{"range":"453","text":"434"},{"range":"453","text":"435"},{"range":"454","text":"434"},{"range":"454","text":"435"},{"range":"455","text":"434"},{"range":"455","text":"435"},{"range":"456","text":"434"},{"range":"456","text":"435"},{"range":"457","text":"434"},{"range":"457","text":"435"},"Update the dependencies array to be: [currentDate, dispatch]",{"range":"458","text":"459"},{"range":"460","text":"434"},{"range":"460","text":"435"},{"range":"461","text":"434"},{"range":"461","text":"435"},{"range":"462","text":"434"},{"range":"462","text":"435"},{"range":"463","text":"434"},{"range":"463","text":"435"},{"range":"464","text":"434"},{"range":"464","text":"435"},{"range":"465","text":"434"},{"range":"465","text":"435"},{"range":"466","text":"434"},{"range":"466","text":"435"},{"range":"467","text":"434"},{"range":"467","text":"435"},{"range":"468","text":"434"},{"range":"468","text":"435"},{"range":"469","text":"434"},{"range":"469","text":"435"},{"range":"470","text":"434"},{"range":"470","text":"435"},{"range":"471","text":"434"},{"range":"471","text":"435"},{"range":"472","text":"434"},{"range":"472","text":"435"},{"range":"473","text":"434"},{"range":"473","text":"435"},{"range":"474","text":"434"},{"range":"474","text":"435"},{"range":"475","text":"434"},{"range":"475","text":"435"},{"range":"476","text":"434"},{"range":"476","text":"435"},{"range":"477","text":"434"},{"range":"477","text":"435"},{"range":"478","text":"434"},{"range":"478","text":"435"},{"range":"479","text":"434"},{"range":"479","text":"435"},{"range":"480","text":"434"},{"range":"480","text":"435"},{"range":"481","text":"434"},{"range":"481","text":"435"},{"range":"482","text":"434"},{"range":"482","text":"435"},[304,307],"unknown","never",[372,375],[406,409],[382,385],[451,454],[445,448],[634,637],[710,713],[780,783],[850,853],[327,330],[981,983],"[id, role]",[1295,1314],"[registerUserEmail, stateForm]",[1626,1629],[2005,2008],[2164,2167],[336,339],[397,400],[264,267],[333,336],[528,531],[758,760],"[currentDate, dispatch]",[589,592],[655,658],[300,303],[459,462],[660,663],[919,922],[1037,1040],[1767,1770],[332,335],[401,404],[891,894],[555,558],[405,408],[532,535],[593,596],[269,272],[331,334],[737,740],[810,813],[885,888],[960,963],[1420,1423],[1575,1578]]